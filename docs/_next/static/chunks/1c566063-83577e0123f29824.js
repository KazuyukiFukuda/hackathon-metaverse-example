"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[86],{8893:function(e,t,i){i.d(t,{XX:function(){return tO},ck:function(){return tC}});var n=i(9477);/*!
 * @pixiv/three-vrm v1.0.8
 * VRM file loader for three.js.
 *
 * Copyright (c) 2019-2023 pixiv Inc.
 * @pixiv/three-vrm is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 *//*!
 * @pixiv/three-vrm-core v1.0.8
 * The implementation of core features of VRM, for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-core is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */class r extends n.Object3D{constructor(e){super(),this.weight=0,this.isBinary=!1,this.overrideBlink="none",this.overrideLookAt="none",this.overrideMouth="none",this._binds=[],this.name=`VRMExpression_${e}`,this.expressionName=e,this.type="VRMExpression",this.visible=!1}get overrideBlinkAmount(){return"block"===this.overrideBlink?0<this.weight?1:0:"blend"===this.overrideBlink?this.weight:0}get overrideLookAtAmount(){return"block"===this.overrideLookAt?0<this.weight?1:0:"blend"===this.overrideLookAt?this.weight:0}get overrideMouthAmount(){return"block"===this.overrideMouth?0<this.weight?1:0:"blend"===this.overrideMouth?this.weight:0}addBind(e){this._binds.push(e)}applyWeight(e){var t;let i=this.isBinary?this.weight<=.5?0:1:this.weight;i*=null!==(t=null==e?void 0:e.multiplier)&&void 0!==t?t:1,this._binds.forEach(e=>e.applyWeight(i))}clearAppliedWeight(){this._binds.forEach(e=>e.clearAppliedWeight())}}function o(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(s,a)}l((n=n.apply(e,t||[])).next())})}function s(e,t,i){var n,r;let o=e.parser.json,s=null===(n=o.nodes)||void 0===n?void 0:n[t];if(null==s)return console.warn(`extractPrimitivesInternal: Attempt to use nodes[${t}] of glTF but the node doesn't exist`),null;let a=s.mesh;if(null==a)return null;let l=null===(r=o.meshes)||void 0===r?void 0:r[a];if(null==l)return console.warn(`extractPrimitivesInternal: Attempt to use meshes[${a}] of glTF but the mesh doesn't exist`),null;let u=l.primitives.length,d=[];return i.traverse(e=>{d.length<u&&e.isMesh&&d.push(e)}),d}function a(e,t){return o(this,void 0,void 0,function*(){let i=yield e.parser.getDependency("node",t);return s(e,t,i)})}function l(e){return o(this,void 0,void 0,function*(){let t=yield e.parser.getDependencies("node"),i=new Map;return t.forEach((t,n)=>{let r=s(e,n,t);null!=r&&i.set(n,r)}),i})}function u(e,t){var i,r;let o=parseInt(n.REVISION,10),s=null;if(o>=133)s=null!==(r=null===(i=e.associations.get(t))||void 0===i?void 0:i.materials)&&void 0!==r?r:null;else{let i=e.associations,n=i.get(t);(null==n?void 0:n.type)==="materials"&&(s=n.index)}return s}let d={Aa:"aa",Ih:"ih",Ou:"ou",Ee:"ee",Oh:"oh",Blink:"blink",Happy:"happy",Angry:"angry",Sad:"sad",Relaxed:"relaxed",LookUp:"lookUp",Surprised:"surprised",LookDown:"lookDown",LookLeft:"lookLeft",LookRight:"lookRight",BlinkLeft:"blinkLeft",BlinkRight:"blinkRight",Neutral:"neutral"};function h(e){return Math.max(Math.min(e,1),0)}class c{constructor(){this.blinkExpressionNames=["blink","blinkLeft","blinkRight"],this.lookAtExpressionNames=["lookLeft","lookRight","lookUp","lookDown"],this.mouthExpressionNames=["aa","ee","ih","oh","ou"],this._expressions=[],this._expressionMap={}}get expressions(){return this._expressions.concat()}get expressionMap(){return Object.assign({},this._expressionMap)}get presetExpressionMap(){let e={},t=new Set(Object.values(d));return Object.entries(this._expressionMap).forEach(([i,n])=>{t.has(i)&&(e[i]=n)}),e}get customExpressionMap(){let e={},t=new Set(Object.values(d));return Object.entries(this._expressionMap).forEach(([i,n])=>{t.has(i)||(e[i]=n)}),e}copy(e){let t=this._expressions.concat();return t.forEach(e=>{this.unregisterExpression(e)}),e._expressions.forEach(e=>{this.registerExpression(e)}),this.blinkExpressionNames=e.blinkExpressionNames.concat(),this.lookAtExpressionNames=e.lookAtExpressionNames.concat(),this.mouthExpressionNames=e.mouthExpressionNames.concat(),this}clone(){return new c().copy(this)}getExpression(e){var t;return null!==(t=this._expressionMap[e])&&void 0!==t?t:null}registerExpression(e){this._expressions.push(e),this._expressionMap[e.expressionName]=e}unregisterExpression(e){let t=this._expressions.indexOf(e);-1===t&&console.warn("VRMExpressionManager: The specified expressions is not registered"),this._expressions.splice(t,1),delete this._expressionMap[e.expressionName]}getValue(e){var t;let i=this.getExpression(e);return null!==(t=null==i?void 0:i.weight)&&void 0!==t?t:null}setValue(e,t){let i=this.getExpression(e);i&&(i.weight=h(t))}getExpressionTrackName(e){let t=this.getExpression(e);return t?`${t.name}.weight`:null}update(){let e=this._calculateWeightMultipliers();this._expressions.forEach(e=>{e.clearAppliedWeight()}),this._expressions.forEach(t=>{let i=1,n=t.expressionName;-1!==this.blinkExpressionNames.indexOf(n)&&(i*=e.blink),-1!==this.lookAtExpressionNames.indexOf(n)&&(i*=e.lookAt),-1!==this.mouthExpressionNames.indexOf(n)&&(i*=e.mouth),t.applyWeight({multiplier:i})})}_calculateWeightMultipliers(){let e=1,t=1,i=1;return this._expressions.forEach(n=>{e-=n.overrideBlinkAmount,t-=n.overrideLookAtAmount,i-=n.overrideMouthAmount}),e=Math.max(0,e),t=Math.max(0,t),i=Math.max(0,i),{blink:e,lookAt:t,mouth:i}}}let p={Color:"color",EmissionColor:"emissionColor",ShadeColor:"shadeColor",MatcapColor:"matcapColor",RimColor:"rimColor",OutlineColor:"outlineColor"},m={_Color:p.Color,_EmissionColor:p.EmissionColor,_ShadeColor:p.ShadeColor,_RimColor:p.RimColor,_OutlineColor:p.OutlineColor},f=new n.Color;class v{constructor({material:e,type:t,targetValue:i}){var r,o,s;this.material=e,this.type=t,this.targetValue=i;let a=null===(r=Object.entries(v._propertyNameMapMap).find(([t])=>!0===e[t]))||void 0===r?void 0:r[1],l=null!==(o=null==a?void 0:a[t])&&void 0!==o?o:null;if(null==l)console.warn(`Tried to add a material color bind to the material ${null!==(s=e.name)&&void 0!==s?s:"(no name)"}, the type ${t} but the material or the type is not supported.`),this._state=null;else{let t=e[l],r=t.clone(),o=new n.Color(i.r-r.r,i.g-r.g,i.b-r.b);this._state={propertyName:l,initialValue:r,deltaValue:o}}}applyWeight(e){if(null==this._state)return;let{propertyName:t,deltaValue:i}=this._state,n=this.material[t];void 0!==n&&(n.add(f.copy(i).multiplyScalar(e)),"boolean"==typeof this.material.shouldApplyUniforms&&(this.material.shouldApplyUniforms=!0))}clearAppliedWeight(){if(null==this._state)return;let{propertyName:e,initialValue:t}=this._state,i=this.material[e];void 0!==i&&(i.copy(t),"boolean"==typeof this.material.shouldApplyUniforms&&(this.material.shouldApplyUniforms=!0))}}v._propertyNameMapMap={isMeshStandardMaterial:{color:"color",emissionColor:"emissive"},isMeshBasicMaterial:{color:"color"},isMToonMaterial:{color:"color",emissionColor:"emissive",outlineColor:"outlineColorFactor",matcapColor:"matcapFactor",rimColor:"parametricRimColorFactor",shadeColor:"shadeColorFactor"}};class g{constructor({primitives:e,index:t,weight:i}){this.primitives=e,this.index=t,this.weight=i}applyWeight(e){this.primitives.forEach(t=>{var i;(null===(i=t.morphTargetInfluences)||void 0===i?void 0:i[this.index])!=null&&(t.morphTargetInfluences[this.index]+=this.weight*e)})}clearAppliedWeight(){this.primitives.forEach(e=>{var t;(null===(t=e.morphTargetInfluences)||void 0===t?void 0:t[this.index])!=null&&(e.morphTargetInfluences[this.index]=0)})}}let _=new n.Vector2;class M{constructor({material:e,scale:t,offset:i}){var n,r;this.material=e,this.scale=t,this.offset=i;let o=null===(n=Object.entries(M._propertyNamesMap).find(([t])=>!0===e[t]))||void 0===n?void 0:n[1];null==o?(console.warn(`Tried to add a texture transform bind to the material ${null!==(r=e.name)&&void 0!==r?r:"(no name)"} but the material is not supported.`),this._properties=[]):(this._properties=[],o.forEach(n=>{var r;let o=null===(r=e[n])||void 0===r?void 0:r.clone();if(!o)return null;e[n]=o;let s=o.offset.clone(),a=o.repeat.clone(),l=i.clone().sub(s),u=t.clone().sub(a);this._properties.push({name:n,initialOffset:s,deltaOffset:l,initialScale:a,deltaScale:u})}))}applyWeight(e){this._properties.forEach(t=>{let i=this.material[t.name];void 0!==i&&(i.offset.add(_.copy(t.deltaOffset).multiplyScalar(e)),i.repeat.add(_.copy(t.deltaScale).multiplyScalar(e)),i.needsUpdate=!0)})}clearAppliedWeight(){this._properties.forEach(e=>{let t=this.material[e.name];void 0!==t&&(t.offset.copy(e.initialOffset),t.repeat.copy(e.initialScale),t.needsUpdate=!0)})}}M._propertyNamesMap={isMeshStandardMaterial:["map","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","alphaMap"],isMeshBasicMaterial:["map","specularMap","alphaMap"],isMToonMaterial:["map","normalMap","emissiveMap","shadeMultiplyTexture","rimMultiplyTexture","outlineWidthMultiplyTexture","uvAnimationMaskTexture"]};let x=new Set(["1.0","1.0-beta"]);class y{constructor(e){this.parser=e}get name(){return"VRMExpressionLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,function*(){e.userData.vrmExpressionManager=yield this._import(e)})}_import(e){return o(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(t)return t;let i=yield this._v0Import(e);return i||null})}_v1Import(e){var t,i;return o(this,void 0,void 0,function*(){let s=this.parser.json,l=(null===(t=s.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!l)return null;let h=null===(i=s.extensions)||void 0===i?void 0:i.VRMC_vrm;if(!h)return null;let p=h.specVersion;if(!x.has(p))return console.warn(`VRMExpressionLoaderPlugin: Unknown VRMC_vrm specVersion "${p}"`),null;let m=h.expressions;if(!m)return null;let f=new Set(Object.values(d)),_=new Map;null!=m.preset&&Object.entries(m.preset).forEach(([e,t])=>{if(null!=t){if(!f.has(e)){console.warn(`VRMExpressionLoaderPlugin: Unknown preset name "${e}" detected. Ignoring the expression`);return}_.set(e,t)}}),null!=m.custom&&Object.entries(m.custom).forEach(([e,t])=>{if(f.has(e)){console.warn(`VRMExpressionLoaderPlugin: Custom expression cannot have preset name "${e}". Ignoring the expression`);return}_.set(e,t)});let y=new c;return yield Promise.all(Array.from(_.entries()).map(([t,i])=>o(this,void 0,void 0,function*(){var s,l,d,h,c,p,m;let f=new r(t);if(e.scene.add(f),f.isBinary=null!==(s=i.isBinary)&&void 0!==s&&s,f.overrideBlink=null!==(l=i.overrideBlink)&&void 0!==l?l:"none",f.overrideLookAt=null!==(d=i.overrideLookAt)&&void 0!==d?d:"none",f.overrideMouth=null!==(h=i.overrideMouth)&&void 0!==h?h:"none",null===(c=i.morphTargetBinds)||void 0===c||c.forEach(t=>o(this,void 0,void 0,function*(){var n;if(void 0===t.node||void 0===t.index)return;let r=yield a(e,t.node),o=t.index;if(!r.every(e=>Array.isArray(e.morphTargetInfluences)&&o<e.morphTargetInfluences.length)){console.warn(`VRMExpressionLoaderPlugin: ${i.name} attempts to index morph #${o} but not found.`);return}f.addBind(new g({primitives:r,index:o,weight:null!==(n=t.weight)&&void 0!==n?n:1}))})),i.materialColorBinds||i.textureTransformBinds){let t=[];e.scene.traverse(e=>{let i=e.material;i&&t.push(i)}),null===(p=i.materialColorBinds)||void 0===p||p.forEach(e=>o(this,void 0,void 0,function*(){let i=t.filter(t=>{let i=u(this.parser,t);return e.material===i});i.forEach(t=>{f.addBind(new v({material:t,type:e.type,targetValue:new n.Color().fromArray(e.targetValue)}))})})),null===(m=i.textureTransformBinds)||void 0===m||m.forEach(e=>o(this,void 0,void 0,function*(){let i=t.filter(t=>{let i=u(this.parser,t);return e.material===i});i.forEach(t=>{var i,r;f.addBind(new M({material:t,offset:new n.Vector2().fromArray(null!==(i=e.offset)&&void 0!==i?i:[0,0]),scale:new n.Vector2().fromArray(null!==(r=e.scale)&&void 0!==r?r:[1,1])}))})}))}y.registerExpression(f)}))),y})}_v0Import(e){var t;return o(this,void 0,void 0,function*(){let i=this.parser.json,s=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!s)return null;let l=s.blendShapeMaster;if(!l)return null;let u=new c,d=l.blendShapeGroups;if(!d)return u;let h=new Set;return yield Promise.all(d.map(t=>o(this,void 0,void 0,function*(){var s;let l=t.presetName,d=null!=l&&y.v0v1PresetNameMap[l]||null,c=null!=d?d:t.name;if(null==c){console.warn("VRMExpressionLoaderPlugin: One of custom expressions has no name. Ignoring the expression");return}if(h.has(c)){console.warn(`VRMExpressionLoaderPlugin: An expression preset ${l} has duplicated entries. Ignoring the expression`);return}h.add(c);let p=new r(c);e.scene.add(p),p.isBinary=null!==(s=t.isBinary)&&void 0!==s&&s,t.binds&&t.binds.forEach(n=>o(this,void 0,void 0,function*(){var r;if(void 0===n.mesh||void 0===n.index)return;let s=[];null===(r=i.nodes)||void 0===r||r.forEach((e,t)=>{e.mesh===n.mesh&&s.push(t)});let l=n.index;yield Promise.all(s.map(i=>o(this,void 0,void 0,function*(){var r;let o=yield a(e,i);if(!o.every(e=>Array.isArray(e.morphTargetInfluences)&&l<e.morphTargetInfluences.length)){console.warn(`VRMExpressionLoaderPlugin: ${t.name} attempts to index ${l}th morph but not found.`);return}p.addBind(new g({primitives:o,index:l,weight:.01*(null!==(r=n.weight)&&void 0!==r?r:100)}))})))}));let f=t.materialValues;f&&0!==f.length&&f.forEach(t=>{if(void 0===t.materialName||void 0===t.propertyName||void 0===t.targetValue)return;let i=[];e.scene.traverse(e=>{if(e.material){let n=e.material;Array.isArray(n)?i.push(...n.filter(e=>(e.name===t.materialName||e.name===t.materialName+" (Outline)")&&-1===i.indexOf(e))):n.name===t.materialName&&-1===i.indexOf(n)&&i.push(n)}});let r=t.propertyName;i.forEach(e=>{if("_MainTex_ST"===r){let i=new n.Vector2(t.targetValue[0],t.targetValue[1]),r=new n.Vector2(t.targetValue[2],t.targetValue[3]);p.addBind(new M({material:e,scale:i,offset:r}));return}let i=m[r];if(i){p.addBind(new v({material:e,type:i,targetValue:new n.Color(...t.targetValue.slice(0,3))}));return}console.warn(r+" is not supported")})}),u.registerExpression(p)}))),u})}}y.v0v1PresetNameMap={a:"aa",e:"ee",i:"ih",o:"oh",u:"ou",blink:"blink",joy:"happy",angry:"angry",sorrow:"sad",fun:"relaxed",lookup:"lookUp",lookdown:"lookDown",lookleft:"lookLeft",lookright:"lookRight",blink_l:"blinkLeft",blink_r:"blinkRight",neutral:"neutral"};class T{constructor(e,t){this._firstPersonOnlyLayer=T.DEFAULT_FIRSTPERSON_ONLY_LAYER,this._thirdPersonOnlyLayer=T.DEFAULT_THIRDPERSON_ONLY_LAYER,this._initializedLayers=!1,this.humanoid=e,this.meshAnnotations=t}copy(e){if(this.humanoid!==e.humanoid)throw Error("VRMFirstPerson: humanoid must be same in order to copy");return this.meshAnnotations=e.meshAnnotations.map(e=>({meshes:e.meshes.concat(),type:e.type})),this}clone(){return new T(this.humanoid,this.meshAnnotations).copy(this)}get firstPersonOnlyLayer(){return this._firstPersonOnlyLayer}get thirdPersonOnlyLayer(){return this._thirdPersonOnlyLayer}setup({firstPersonOnlyLayer:e=T.DEFAULT_FIRSTPERSON_ONLY_LAYER,thirdPersonOnlyLayer:t=T.DEFAULT_THIRDPERSON_ONLY_LAYER}={}){this._initializedLayers||(this._firstPersonOnlyLayer=e,this._thirdPersonOnlyLayer=t,this.meshAnnotations.forEach(e=>{e.meshes.forEach(t=>{"firstPersonOnly"===e.type?(t.layers.set(this._firstPersonOnlyLayer),t.traverse(e=>e.layers.set(this._firstPersonOnlyLayer))):"thirdPersonOnly"===e.type?(t.layers.set(this._thirdPersonOnlyLayer),t.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer))):"auto"===e.type&&this._createHeadlessModel(t)})}),this._initializedLayers=!0)}_excludeTriangles(e,t,i,n){let r=0;if(null!=t&&t.length>0)for(let o=0;o<e.length;o+=3){let s=e[o],a=e[o+1],l=e[o+2],u=t[s],d=i[s];if(u[0]>0&&n.includes(d[0])||u[1]>0&&n.includes(d[1])||u[2]>0&&n.includes(d[2])||u[3]>0&&n.includes(d[3]))continue;let h=t[a],c=i[a];if(h[0]>0&&n.includes(c[0])||h[1]>0&&n.includes(c[1])||h[2]>0&&n.includes(c[2])||h[3]>0&&n.includes(c[3]))continue;let p=t[l],m=i[l];!(p[0]>0&&n.includes(m[0])||p[1]>0&&n.includes(m[1])||p[2]>0&&n.includes(m[2]))&&(p[3]>0&&n.includes(m[3])||(e[r++]=s,e[r++]=a,e[r++]=l))}return r}_createErasedMesh(e,t){let i=new n.SkinnedMesh(e.geometry.clone(),e.material);i.name=`${e.name}(erase)`,i.frustumCulled=e.frustumCulled,i.layers.set(this._firstPersonOnlyLayer);let r=i.geometry,o=r.getAttribute("skinIndex").array,s=[];for(let e=0;e<o.length;e+=4)s.push([o[e],o[e+1],o[e+2],o[e+3]]);let a=r.getAttribute("skinWeight").array,l=[];for(let e=0;e<a.length;e+=4)l.push([a[e],a[e+1],a[e+2],a[e+3]]);let u=r.getIndex();if(!u)throw Error("The geometry doesn't have an index buffer");let d=Array.from(u.array),h=this._excludeTriangles(d,l,s,t),c=[];for(let e=0;e<h;e++)c[e]=d[e];return r.setIndex(c),e.onBeforeRender&&(i.onBeforeRender=e.onBeforeRender),i.bind(new n.Skeleton(e.skeleton.bones,e.skeleton.boneInverses),new n.Matrix4),i}_createHeadlessModelForSkinnedMesh(e,t){let i=[];if(t.skeleton.bones.forEach((e,t)=>{this._isEraseTarget(e)&&i.push(t)}),!i.length){t.layers.enable(this._thirdPersonOnlyLayer),t.layers.enable(this._firstPersonOnlyLayer);return}t.layers.set(this._thirdPersonOnlyLayer);let n=this._createErasedMesh(t,i);e.add(n)}_createHeadlessModel(e){if("Group"===e.type){if(e.layers.set(this._thirdPersonOnlyLayer),this._isEraseTarget(e))e.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer));else{let t=new n.Group;t.name=`_headless_${e.name}`,t.layers.set(this._firstPersonOnlyLayer),e.parent.add(t),e.children.filter(e=>"SkinnedMesh"===e.type).forEach(e=>{this._createHeadlessModelForSkinnedMesh(t,e)})}}else"SkinnedMesh"===e.type?this._createHeadlessModelForSkinnedMesh(e.parent,e):this._isEraseTarget(e)&&(e.layers.set(this._thirdPersonOnlyLayer),e.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer)))}_isEraseTarget(e){return e===this.humanoid.getRawBoneNode("head")||!!e.parent&&this._isEraseTarget(e.parent)}}T.DEFAULT_FIRSTPERSON_ONLY_LAYER=9,T.DEFAULT_THIRDPERSON_ONLY_LAYER=10;let w=new Set(["1.0","1.0-beta"]);class R{constructor(e){this.parser=e}get name(){return"VRMFirstPersonLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,function*(){let t=e.userData.vrmHumanoid;if(null!==t){if(void 0===t)throw Error("VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");e.userData.vrmFirstPerson=yield this._import(e,t)}})}_import(e,t){return o(this,void 0,void 0,function*(){if(null==t)return null;let i=yield this._v1Import(e,t);if(i)return i;let n=yield this._v0Import(e,t);return n||null})}_v1Import(e,t){var i,n;return o(this,void 0,void 0,function*(){let r=this.parser.json,o=(null===(i=r.extensionsUsed)||void 0===i?void 0:i.indexOf("VRMC_vrm"))!==-1;if(!o)return null;let s=null===(n=r.extensions)||void 0===n?void 0:n.VRMC_vrm;if(!s)return null;let a=s.specVersion;if(!w.has(a))return console.warn(`VRMFirstPersonLoaderPlugin: Unknown VRMC_vrm specVersion "${a}"`),null;let u=s.firstPerson;if(!u)return null;let d=[],h=yield l(e);return Array.from(h.entries()).forEach(([e,t])=>{var i;let n=u.meshAnnotations?u.meshAnnotations.find(t=>t.node===e):void 0;d.push({meshes:t,type:null!==(i=null==n?void 0:n.type)&&void 0!==i?i:"both"})}),new T(t,d)})}_v0Import(e,t){var i;return o(this,void 0,void 0,function*(){let n=this.parser.json,r=null===(i=n.extensions)||void 0===i?void 0:i.VRM;if(!r)return null;let o=r.firstPerson;if(!o)return null;let s=[],a=yield l(e);return Array.from(a.entries()).forEach(([e,t])=>{let i=n.nodes[e],r=o.meshAnnotations?o.meshAnnotations.find(e=>e.mesh===i.mesh):void 0;s.push({meshes:t,type:this._convertV0FlagToV1Type(null==r?void 0:r.firstPersonFlag)})}),new T(t,s)})}_convertV0FlagToV1Type(e){return"FirstPersonOnly"===e?"firstPersonOnly":"ThirdPersonOnly"===e?"thirdPersonOnly":"Auto"===e?"auto":"both"}}let E=new n.Vector3,P=new n.Vector3,S=new n.Quaternion;class A extends n.Group{constructor(e){super(),this.vrmHumanoid=e,this._boneAxesMap=new Map,Object.values(e.humanBones).forEach(e=>{let t=new n.AxesHelper(1);t.matrixAutoUpdate=!1,t.material.depthTest=!1,t.material.depthWrite=!1,this.add(t),this._boneAxesMap.set(e,t)})}dispose(){Array.from(this._boneAxesMap.values()).forEach(e=>{e.geometry.dispose(),e.material.dispose()})}updateMatrixWorld(e){Array.from(this._boneAxesMap.entries()).forEach(([e,t])=>{e.node.updateWorldMatrix(!0,!1),e.node.matrixWorld.decompose(E,S,P);let i=E.set(.1,.1,.1).divide(P);t.matrix.copy(e.node.matrixWorld).scale(i)}),super.updateMatrixWorld(e)}}let L=["hips","spine","chest","upperChest","neck","head","leftEye","rightEye","jaw","leftUpperLeg","leftLowerLeg","leftFoot","leftToes","rightUpperLeg","rightLowerLeg","rightFoot","rightToes","leftShoulder","leftUpperArm","leftLowerArm","leftHand","rightShoulder","rightUpperArm","rightLowerArm","rightHand","leftThumbMetacarpal","leftThumbProximal","leftThumbDistal","leftIndexProximal","leftIndexIntermediate","leftIndexDistal","leftMiddleProximal","leftMiddleIntermediate","leftMiddleDistal","leftRingProximal","leftRingIntermediate","leftRingDistal","leftLittleProximal","leftLittleIntermediate","leftLittleDistal","rightThumbMetacarpal","rightThumbProximal","rightThumbDistal","rightIndexProximal","rightIndexIntermediate","rightIndexDistal","rightMiddleProximal","rightMiddleIntermediate","rightMiddleDistal","rightRingProximal","rightRingIntermediate","rightRingDistal","rightLittleProximal","rightLittleIntermediate","rightLittleDistal"],b={hips:null,spine:"hips",chest:"spine",upperChest:"chest",neck:"upperChest",head:"neck",leftEye:"head",rightEye:"head",jaw:"head",leftUpperLeg:"hips",leftLowerLeg:"leftUpperLeg",leftFoot:"leftLowerLeg",leftToes:"leftFoot",rightUpperLeg:"hips",rightLowerLeg:"rightUpperLeg",rightFoot:"rightLowerLeg",rightToes:"rightFoot",leftShoulder:"upperChest",leftUpperArm:"leftShoulder",leftLowerArm:"leftUpperArm",leftHand:"leftLowerArm",rightShoulder:"upperChest",rightUpperArm:"rightShoulder",rightLowerArm:"rightUpperArm",rightHand:"rightLowerArm",leftThumbMetacarpal:"leftHand",leftThumbProximal:"leftThumbMetacarpal",leftThumbDistal:"leftThumbProximal",leftIndexProximal:"leftHand",leftIndexIntermediate:"leftIndexProximal",leftIndexDistal:"leftIndexIntermediate",leftMiddleProximal:"leftHand",leftMiddleIntermediate:"leftMiddleProximal",leftMiddleDistal:"leftMiddleIntermediate",leftRingProximal:"leftHand",leftRingIntermediate:"leftRingProximal",leftRingDistal:"leftRingIntermediate",leftLittleProximal:"leftHand",leftLittleIntermediate:"leftLittleProximal",leftLittleDistal:"leftLittleIntermediate",rightThumbMetacarpal:"rightHand",rightThumbProximal:"rightThumbMetacarpal",rightThumbDistal:"rightThumbProximal",rightIndexProximal:"rightHand",rightIndexIntermediate:"rightIndexProximal",rightIndexDistal:"rightIndexIntermediate",rightMiddleProximal:"rightHand",rightMiddleIntermediate:"rightMiddleProximal",rightMiddleDistal:"rightMiddleIntermediate",rightRingProximal:"rightHand",rightRingIntermediate:"rightRingProximal",rightRingDistal:"rightRingIntermediate",rightLittleProximal:"rightHand",rightLittleIntermediate:"rightLittleProximal",rightLittleDistal:"rightLittleIntermediate"};function I(e){return e.invert?e.invert():e.inverse(),e}let U=new n.Vector3,O=new n.Quaternion;class V{constructor(e){this.humanBones=e,this.restPose=this.getAbsolutePose()}getAbsolutePose(){let e={};return Object.keys(this.humanBones).forEach(t=>{let i=this.getBoneNode(t);i&&(U.copy(i.position),O.copy(i.quaternion),e[t]={position:U.toArray(),rotation:O.toArray()})}),e}getPose(){let e={};return Object.keys(this.humanBones).forEach(t=>{let i=this.getBoneNode(t);if(!i)return;U.set(0,0,0),O.identity();let n=this.restPose[t];(null==n?void 0:n.position)&&U.fromArray(n.position).negate(),(null==n?void 0:n.rotation)&&I(O.fromArray(n.rotation)),U.add(i.position),O.premultiply(i.quaternion),e[t]={position:U.toArray(),rotation:O.toArray()}}),e}setPose(e){Object.entries(e).forEach(([e,t])=>{let i=this.getBoneNode(e);if(!i)return;let n=this.restPose[e];n&&((null==t?void 0:t.position)&&(i.position.fromArray(t.position),n.position&&i.position.add(U.fromArray(n.position))),(null==t?void 0:t.rotation)&&(i.quaternion.fromArray(t.rotation),n.rotation&&i.quaternion.multiply(O.fromArray(n.rotation))))})}resetPose(){Object.entries(this.restPose).forEach(([e,t])=>{let i=this.getBoneNode(e);i&&((null==t?void 0:t.position)&&i.position.fromArray(t.position),(null==t?void 0:t.rotation)&&i.quaternion.fromArray(t.rotation))})}getBone(e){var t;return null!==(t=this.humanBones[e])&&void 0!==t?t:void 0}getBoneNode(e){var t,i;return null!==(i=null===(t=this.humanBones[e])||void 0===t?void 0:t.node)&&void 0!==i?i:null}}let N=new n.Vector3,C=new n.Quaternion,D=new n.Vector3;class F extends V{constructor(e){let{rigBones:t,root:i,parentWorldRotations:n,boneRotations:r}=F._setupTransforms(e);super(t),this.original=e,this.root=i,this._parentWorldRotations=n,this._boneRotations=r}static _setupTransforms(e){let t=new n.Object3D;t.name="VRMHumanoidRig";let i={},r={},o={};L.forEach(t=>{let s=e.getBoneNode(t);if(s){let e=new n.Vector3,a=new n.Quaternion;s.updateWorldMatrix(!0,!1),s.matrixWorld.decompose(e,a,N),i[t]=e,r[t]=a,o[t]=s.quaternion.clone()}});let s={},a={};return L.forEach(o=>{var l;let u=e.getBoneNode(o);if(u){let e,d;let h=i[o],c=o;for(;null==e&&null!=(c=b[c]);)e=i[c],d=r[c];let p=new n.Object3D;p.name="Normalized_"+u.name;let m=c?null===(l=a[c])||void 0===l?void 0:l.node:t;m.add(p),p.position.copy(h),e&&p.position.sub(e),a[o]={node:p},s[o]=null!=d?d:new n.Quaternion}}),{rigBones:a,root:t,parentWorldRotations:s,boneRotations:o}}update(){L.forEach(e=>{let t=this.original.getBoneNode(e);if(null!=t){let i=this.getBoneNode(e),n=this._parentWorldRotations[e],r=C.copy(n).invert(),o=this._boneRotations[e];if(t.quaternion.copy(i.quaternion).multiply(n).premultiply(r).multiply(o),"hips"===e){let e=i.getWorldPosition(D);t.parent.updateWorldMatrix(!0,!1);let n=t.parent.matrixWorld,r=e.applyMatrix4(n.invert());t.position.copy(r)}}})}}class B{constructor(e,t){var i;this.autoUpdateHumanBones=null===(i=null==t?void 0:t.autoUpdateHumanBones)||void 0===i||i,this._rawHumanBones=new V(e),this._normalizedHumanBones=new F(this._rawHumanBones)}get restPose(){return console.warn("VRMHumanoid: restPose is deprecated. Use either rawRestPose or normalizedRestPose instead."),this.rawRestPose}get rawRestPose(){return this._rawHumanBones.restPose}get normalizedRestPose(){return this._normalizedHumanBones.restPose}get humanBones(){return this._rawHumanBones.humanBones}get rawHumanBones(){return this._rawHumanBones.humanBones}get normalizedHumanBones(){return this._normalizedHumanBones.humanBones}get normalizedHumanBonesRoot(){return this._normalizedHumanBones.root}copy(e){return this.autoUpdateHumanBones=e.autoUpdateHumanBones,this._rawHumanBones=new V(e.humanBones),this._normalizedHumanBones=new F(this._rawHumanBones),this}clone(){return new B(this.humanBones,{autoUpdateHumanBones:this.autoUpdateHumanBones}).copy(this)}getAbsolutePose(){return console.warn("VRMHumanoid: getAbsolutePose() is deprecated. Use either getRawAbsolutePose() or getNormalizedAbsolutePose() instead."),this.getRawAbsolutePose()}getRawAbsolutePose(){return this._rawHumanBones.getAbsolutePose()}getNormalizedAbsolutePose(){return this._normalizedHumanBones.getAbsolutePose()}getPose(){return console.warn("VRMHumanoid: getPose() is deprecated. Use either getRawPose() or getNormalizedPose() instead."),this.getRawPose()}getRawPose(){return this._rawHumanBones.getPose()}getNormalizedPose(){return this._normalizedHumanBones.getPose()}setPose(e){return console.warn("VRMHumanoid: setPose() is deprecated. Use either setRawPose() or setNormalizedPose() instead."),this.setRawPose(e)}setRawPose(e){return this._rawHumanBones.setPose(e)}setNormalizedPose(e){return this._normalizedHumanBones.setPose(e)}resetPose(){return console.warn("VRMHumanoid: resetPose() is deprecated. Use either resetRawPose() or resetNormalizedPose() instead."),this.resetRawPose()}resetRawPose(){return this._rawHumanBones.resetPose()}resetNormalizedPose(){return this._normalizedHumanBones.resetPose()}getBone(e){return console.warn("VRMHumanoid: getBone() is deprecated. Use either getRawBone() or getNormalizedBone() instead."),this.getRawBone(e)}getRawBone(e){return this._rawHumanBones.getBone(e)}getNormalizedBone(e){return this._normalizedHumanBones.getBone(e)}getBoneNode(e){return console.warn("VRMHumanoid: getBoneNode() is deprecated. Use either getRawBoneNode() or getNormalizedBoneNode() instead."),this.getRawBoneNode(e)}getRawBoneNode(e){return this._rawHumanBones.getBoneNode(e)}getNormalizedBoneNode(e){return this._normalizedHumanBones.getBoneNode(e)}update(){this.autoUpdateHumanBones&&this._normalizedHumanBones.update()}}let H={Hips:"hips",Spine:"spine",Head:"head",LeftUpperLeg:"leftUpperLeg",LeftLowerLeg:"leftLowerLeg",LeftFoot:"leftFoot",RightUpperLeg:"rightUpperLeg",RightLowerLeg:"rightLowerLeg",RightFoot:"rightFoot",LeftUpperArm:"leftUpperArm",LeftLowerArm:"leftLowerArm",LeftHand:"leftHand",RightUpperArm:"rightUpperArm",RightLowerArm:"rightLowerArm",RightHand:"rightHand"},W=new Set(["1.0","1.0-beta"]),k={leftThumbProximal:"leftThumbMetacarpal",leftThumbIntermediate:"leftThumbProximal",rightThumbProximal:"rightThumbMetacarpal",rightThumbIntermediate:"rightThumbProximal"};class z{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot,this.autoUpdateHumanBones=null==t?void 0:t.autoUpdateHumanBones}get name(){return"VRMHumanoidLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,function*(){e.userData.vrmHumanoid=yield this._import(e)})}_import(e){return o(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(t)return t;let i=yield this._v0Import(e);return i||null})}_v1Import(e){var t,i;return o(this,void 0,void 0,function*(){let n=this.parser.json,r=(null===(t=n.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!r)return null;let s=null===(i=n.extensions)||void 0===i?void 0:i.VRMC_vrm;if(!s)return null;let a=s.specVersion;if(!W.has(a))return console.warn(`VRMHumanoidLoaderPlugin: Unknown VRMC_vrm specVersion "${a}"`),null;let l=s.humanoid;if(!l)return null;let u=null!=l.humanBones.leftThumbIntermediate||null!=l.humanBones.rightThumbIntermediate,d={};null!=l.humanBones&&(yield Promise.all(Object.entries(l.humanBones).map(([e,t])=>o(this,void 0,void 0,function*(){let i=e,n=t.node;if(u){let e=k[i];null!=e&&(i=e)}let r=yield this.parser.getDependency("node",n);if(null==r){console.warn(`A glTF node bound to the humanoid bone ${i} (index = ${n}) does not exist`);return}d[i]={node:r}}))));let h=new B(this._ensureRequiredBonesExist(d),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(h.normalizedHumanBonesRoot),this.helperRoot){let e=new A(h);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return h})}_v0Import(e){var t;return o(this,void 0,void 0,function*(){let i=this.parser.json,n=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!n)return null;let r=n.humanoid;if(!r)return null;let s={};null!=r.humanBones&&(yield Promise.all(r.humanBones.map(e=>o(this,void 0,void 0,function*(){let t=e.bone,i=e.node;if(null==t||null==i)return;let n=yield this.parser.getDependency("node",i);if(null==n){console.warn(`A glTF node bound to the humanoid bone ${t} (index = ${i}) does not exist`);return}let r=k[t],o=null!=r?r:t;if(null!=s[o]){console.warn(`Multiple bone entries for ${o} detected (index = ${i}), ignoring duplicated entries.`);return}s[o]={node:n}}))));let a=new B(this._ensureRequiredBonesExist(s),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(a.normalizedHumanBonesRoot),this.helperRoot){let e=new A(a);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return a})}_ensureRequiredBonesExist(e){let t=Object.values(H).filter(t=>null==e[t]);if(t.length>0)throw Error(`VRMHumanoidLoaderPlugin: These humanoid bones are required but not exist: ${t.join(", ")}`);return e}}class X extends n.BufferGeometry{constructor(){super(),this._currentTheta=0,this._currentRadius=0,this.theta=0,this.radius=0,this._currentTheta=0,this._currentRadius=0,this._attrPos=new n.BufferAttribute(new Float32Array(195),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.BufferAttribute(new Uint16Array(189),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentTheta!==this.theta&&(this._currentTheta=this.theta,e=!0),this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),e&&this._buildPosition()}_buildPosition(){this._attrPos.setXYZ(0,0,0,0);for(let e=0;e<64;e++){let t=e/63*this._currentTheta;this._attrPos.setXYZ(e+1,this._currentRadius*Math.sin(t),0,this._currentRadius*Math.cos(t))}this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<63;e++)this._attrIndex.setXYZ(3*e,0,e+1,e+2);this._attrIndex.needsUpdate=!0}}class j extends n.BufferGeometry{constructor(){super(),this.radius=0,this._currentRadius=0,this.tail=new n.Vector3,this._currentTail=new n.Vector3,this._attrPos=new n.BufferAttribute(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.BufferAttribute(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),this._currentTail.equals(this.tail)||(this._currentTail.copy(this.tail),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}}let G=new n.Quaternion,Q=new n.Quaternion,Y=new n.Vector3,q=new n.Vector3,$=Math.sqrt(2)/2,Z=new n.Quaternion(0,0,-$,$),J=new n.Vector3(0,1,0);class K extends n.Group{constructor(e){super(),this.matrixAutoUpdate=!1,this.vrmLookAt=e;{let e=new X;e.radius=.5;let t=new n.MeshBasicMaterial({color:65280,transparent:!0,opacity:.5,side:n.DoubleSide,depthTest:!1,depthWrite:!1});this._meshPitch=new n.Mesh(e,t),this.add(this._meshPitch)}{let e=new X;e.radius=.5;let t=new n.MeshBasicMaterial({color:16711680,transparent:!0,opacity:.5,side:n.DoubleSide,depthTest:!1,depthWrite:!1});this._meshYaw=new n.Mesh(e,t),this.add(this._meshYaw)}{let e=new j;e.radius=.1;let t=new n.LineBasicMaterial({color:16777215,depthTest:!1,depthWrite:!1});this._lineTarget=new n.LineSegments(e,t),this._lineTarget.frustumCulled=!1,this.add(this._lineTarget)}}dispose(){this._meshYaw.geometry.dispose(),this._meshYaw.material.dispose(),this._meshPitch.geometry.dispose(),this._meshPitch.material.dispose(),this._lineTarget.geometry.dispose(),this._lineTarget.material.dispose()}updateMatrixWorld(e){let t=n.MathUtils.DEG2RAD*this.vrmLookAt.yaw;this._meshYaw.geometry.theta=t,this._meshYaw.geometry.update();let i=n.MathUtils.DEG2RAD*this.vrmLookAt.pitch;this._meshPitch.geometry.theta=i,this._meshPitch.geometry.update(),this.vrmLookAt.getLookAtWorldPosition(Y),this.vrmLookAt.getLookAtWorldQuaternion(G),G.multiply(this.vrmLookAt.getFaceFrontQuaternion(Q)),this._meshYaw.position.copy(Y),this._meshYaw.quaternion.copy(G),this._meshPitch.position.copy(Y),this._meshPitch.quaternion.copy(G),this._meshPitch.quaternion.multiply(Q.setFromAxisAngle(J,t)),this._meshPitch.quaternion.multiply(Z);let{target:r,autoUpdate:o}=this.vrmLookAt;null!=r&&o&&(r.getWorldPosition(q).sub(Y),this._lineTarget.geometry.tail.copy(q),this._lineTarget.geometry.update(),this._lineTarget.position.copy(Y)),super.updateMatrixWorld(e)}}let ee=new n.Vector3,et=new n.Vector3;function ei(e,t){return e.matrixWorld.decompose(ee,t,et),t}function en(e){return[Math.atan2(-e.z,e.x),Math.atan2(e.y,Math.sqrt(e.x*e.x+e.z*e.z))]}function er(e){return e-2*Math.PI*Math.round(e/2/Math.PI)}let eo=new n.Vector3(0,0,1),es=new n.Vector3,ea=new n.Vector3,el=new n.Vector3,eu=new n.Quaternion,ed=new n.Quaternion,eh=new n.Quaternion,ec=new n.Quaternion,ep=new n.Euler;class em{constructor(e,t){this.offsetFromHeadBone=new n.Vector3,this.autoUpdate=!0,this.faceFront=new n.Vector3(0,0,1),this.humanoid=e,this.applier=t,this._yaw=0,this._pitch=0,this._needsUpdate=!0,this._restHeadWorldQuaternion=this.getLookAtWorldQuaternion(new n.Quaternion)}get yaw(){return this._yaw}set yaw(e){this._yaw=e,this._needsUpdate=!0}get pitch(){return this._pitch}set pitch(e){this._pitch=e,this._needsUpdate=!0}get euler(){return console.warn("VRMLookAt: euler is deprecated. use getEuler() instead."),this.getEuler(new n.Euler)}getEuler(e){return e.set(n.MathUtils.DEG2RAD*this._pitch,n.MathUtils.DEG2RAD*this._yaw,0,"YXZ")}copy(e){if(this.humanoid!==e.humanoid)throw Error("VRMLookAt: humanoid must be same in order to copy");return this.offsetFromHeadBone.copy(e.offsetFromHeadBone),this.applier=e.applier,this.autoUpdate=e.autoUpdate,this.target=e.target,this.faceFront.copy(e.faceFront),this}clone(){return new em(this.humanoid,this.applier).copy(this)}reset(){this._yaw=0,this._pitch=0,this._needsUpdate=!0}getLookAtWorldPosition(e){let t=this.humanoid.getRawBoneNode("head");return e.copy(this.offsetFromHeadBone).applyMatrix4(t.matrixWorld)}getLookAtWorldQuaternion(e){let t=this.humanoid.getRawBoneNode("head");return ei(t,e)}getFaceFrontQuaternion(e){if(.01>this.faceFront.distanceToSquared(eo))return e.copy(this._restHeadWorldQuaternion).invert();let[t,i]=en(this.faceFront);return ep.set(0,.5*Math.PI+t,i,"YZX"),e.setFromEuler(ep).premultiply(ec.copy(this._restHeadWorldQuaternion).invert())}getLookAtWorldDirection(e){return this.getLookAtWorldQuaternion(ed),this.getFaceFrontQuaternion(eh),e.copy(eo).applyQuaternion(ed).applyQuaternion(eh).applyEuler(this.getEuler(ep))}lookAt(e){let t=eu.copy(this._restHeadWorldQuaternion).multiply(I(this.getLookAtWorldQuaternion(ed))),i=this.getLookAtWorldPosition(ea),r=el.copy(e).sub(i).applyQuaternion(t).normalize(),[o,s]=en(this.faceFront),[a,l]=en(r),u=er(a-o),d=er(s-l);this._yaw=n.MathUtils.RAD2DEG*u,this._pitch=n.MathUtils.RAD2DEG*d,this._needsUpdate=!0}update(e){null!=this.target&&this.autoUpdate&&this.lookAt(this.target.getWorldPosition(es)),this._needsUpdate&&(this._needsUpdate=!1,this.applier.applyYawPitch(this._yaw,this._pitch))}}em.EULER_ORDER="YXZ";let ef=new n.Vector3(0,0,1),ev=new n.Quaternion,eg=new n.Quaternion,e_=new n.Euler(0,0,0,"YXZ");class eM{constructor(e,t,i,r,o){this.humanoid=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=i,this.rangeMapVerticalDown=r,this.rangeMapVerticalUp=o,this.faceFront=new n.Vector3(0,0,1),this._restQuatLeftEye=new n.Quaternion,this._restQuatRightEye=new n.Quaternion,this._restLeftEyeParentWorldQuat=new n.Quaternion,this._restRightEyeParentWorldQuat=new n.Quaternion;let s=this.humanoid.getRawBoneNode("leftEye"),a=this.humanoid.getRawBoneNode("rightEye");s&&(this._restQuatLeftEye.copy(s.quaternion),ei(s.parent,this._restLeftEyeParentWorldQuat)),a&&(this._restQuatRightEye.copy(a.quaternion),ei(a.parent,this._restRightEyeParentWorldQuat))}applyYawPitch(e,t){let i=this.humanoid.getRawBoneNode("leftEye"),r=this.humanoid.getRawBoneNode("rightEye"),o=this.humanoid.getNormalizedBoneNode("leftEye"),s=this.humanoid.getNormalizedBoneNode("rightEye");i&&(t<0?e_.x=-n.MathUtils.DEG2RAD*this.rangeMapVerticalDown.map(-t):e_.x=n.MathUtils.DEG2RAD*this.rangeMapVerticalUp.map(t),e<0?e_.y=-n.MathUtils.DEG2RAD*this.rangeMapHorizontalInner.map(-e):e_.y=n.MathUtils.DEG2RAD*this.rangeMapHorizontalOuter.map(e),ev.setFromEuler(e_),this._getWorldFaceFrontQuat(eg),o.quaternion.copy(eg).multiply(ev).multiply(eg.invert()),ev.copy(this._restLeftEyeParentWorldQuat),i.quaternion.copy(o.quaternion).multiply(ev).premultiply(ev.invert()).multiply(this._restQuatLeftEye)),r&&(t<0?e_.x=-n.MathUtils.DEG2RAD*this.rangeMapVerticalDown.map(-t):e_.x=n.MathUtils.DEG2RAD*this.rangeMapVerticalUp.map(t),e<0?e_.y=-n.MathUtils.DEG2RAD*this.rangeMapHorizontalOuter.map(-e):e_.y=n.MathUtils.DEG2RAD*this.rangeMapHorizontalInner.map(e),ev.setFromEuler(e_),this._getWorldFaceFrontQuat(eg),s.quaternion.copy(eg).multiply(ev).multiply(eg.invert()),ev.copy(this._restRightEyeParentWorldQuat),r.quaternion.copy(s.quaternion).multiply(ev).premultiply(ev.invert()).multiply(this._restQuatRightEye))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");let t=n.MathUtils.RAD2DEG*e.y,i=n.MathUtils.RAD2DEG*e.x;this.applyYawPitch(t,i)}_getWorldFaceFrontQuat(e){if(.01>this.faceFront.distanceToSquared(ef))return e.identity();let[t,i]=en(this.faceFront);return e_.set(0,.5*Math.PI+t,i,"YZX"),e.setFromEuler(e_)}}eM.type="bone";class ex{constructor(e,t,i,n,r){this.expressions=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=i,this.rangeMapVerticalDown=n,this.rangeMapVerticalUp=r}applyYawPitch(e,t){t<0?(this.expressions.setValue("lookDown",0),this.expressions.setValue("lookUp",this.rangeMapVerticalUp.map(-t))):(this.expressions.setValue("lookUp",0),this.expressions.setValue("lookDown",this.rangeMapVerticalDown.map(t))),e<0?(this.expressions.setValue("lookLeft",0),this.expressions.setValue("lookRight",this.rangeMapHorizontalOuter.map(-e))):(this.expressions.setValue("lookRight",0),this.expressions.setValue("lookLeft",this.rangeMapHorizontalOuter.map(e)))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");let t=n.MathUtils.RAD2DEG*e.y,i=n.MathUtils.RAD2DEG*e.x;this.applyYawPitch(t,i)}}ex.type="expression";class ey{constructor(e,t){this.inputMaxValue=e,this.outputScale=t}map(e){return this.outputScale*h(e/this.inputMaxValue)}}let eT=new Set(["1.0","1.0-beta"]);class ew{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}get name(){return"VRMLookAtLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,function*(){let t=e.userData.vrmHumanoid;if(null===t)return;if(void 0===t)throw Error("VRMLookAtLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");let i=e.userData.vrmExpressionManager;if(null!==i){if(void 0===i)throw Error("VRMLookAtLoaderPlugin: vrmExpressionManager is undefined. VRMExpressionLoaderPlugin have to be used first");e.userData.vrmLookAt=yield this._import(e,t,i)}})}_import(e,t,i){return o(this,void 0,void 0,function*(){if(null==t||null==i)return null;let n=yield this._v1Import(e,t,i);if(n)return n;let r=yield this._v0Import(e,t,i);return r||null})}_v1Import(e,t,i){var n,r,s;return o(this,void 0,void 0,function*(){let e;let o=this.parser.json,a=(null===(n=o.extensionsUsed)||void 0===n?void 0:n.indexOf("VRMC_vrm"))!==-1;if(!a)return null;let l=null===(r=o.extensions)||void 0===r?void 0:r.VRMC_vrm;if(!l)return null;let u=l.specVersion;if(!eT.has(u))return console.warn(`VRMLookAtLoaderPlugin: Unknown VRMC_vrm specVersion "${u}"`),null;let d=l.lookAt;if(!d)return null;let h="expression"===d.type?1:10,c=this._v1ImportRangeMap(d.rangeMapHorizontalInner,h),p=this._v1ImportRangeMap(d.rangeMapHorizontalOuter,h),m=this._v1ImportRangeMap(d.rangeMapVerticalDown,h),f=this._v1ImportRangeMap(d.rangeMapVerticalUp,h);e="expression"===d.type?new ex(i,c,p,m,f):new eM(t,c,p,m,f);let v=this._importLookAt(t,e);return v.offsetFromHeadBone.fromArray(null!==(s=d.offsetFromHeadBone)&&void 0!==s?s:[0,.06,0]),v})}_v1ImportRangeMap(e,t){var i,n;return new ey(null!==(i=null==e?void 0:e.inputMaxValue)&&void 0!==i?i:90,null!==(n=null==e?void 0:e.outputScale)&&void 0!==n?n:t)}_v0Import(e,t,i){var n,r,s,a;return o(this,void 0,void 0,function*(){let e;let o=this.parser.json,l=null===(n=o.extensions)||void 0===n?void 0:n.VRM;if(!l)return null;let u=l.firstPerson;if(!u)return null;let d="BlendShape"===u.lookAtTypeName?1:10,h=this._v0ImportDegreeMap(u.lookAtHorizontalInner,d),c=this._v0ImportDegreeMap(u.lookAtHorizontalOuter,d),p=this._v0ImportDegreeMap(u.lookAtVerticalDown,d),m=this._v0ImportDegreeMap(u.lookAtVerticalUp,d);e="BlendShape"===u.lookAtTypeName?new ex(i,h,c,p,m):new eM(t,h,c,p,m);let f=this._importLookAt(t,e);return u.firstPersonBoneOffset?f.offsetFromHeadBone.set(null!==(r=u.firstPersonBoneOffset.x)&&void 0!==r?r:0,null!==(s=u.firstPersonBoneOffset.y)&&void 0!==s?s:.06,-(null!==(a=u.firstPersonBoneOffset.z)&&void 0!==a?a:0)):f.offsetFromHeadBone.set(0,.06,0),f.faceFront.set(0,0,-1),e instanceof eM&&e.faceFront.set(0,0,-1),f})}_v0ImportDegreeMap(e,t){var i,n;let r=null==e?void 0:e.curve;return"[0,0,0,1,1,1,1,0]"!==JSON.stringify(r)&&console.warn("Curves of LookAtDegreeMap defined in VRM 0.0 are not supported"),new ey(null!==(i=null==e?void 0:e.xRange)&&void 0!==i?i:90,null!==(n=null==e?void 0:e.yRange)&&void 0!==n?n:t)}_importLookAt(e,t){let i=new em(e,t);if(this.helperRoot){let e=new K(i);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return i}}let eR=new Set(["1.0","1.0-beta"]);class eE{constructor(e,t){var i,n,r;this.parser=e,this.needThumbnailImage=null===(i=null==t?void 0:t.needThumbnailImage)||void 0===i||i,this.acceptLicenseUrls=null!==(n=null==t?void 0:t.acceptLicenseUrls)&&void 0!==n?n:["https://vrm.dev/licenses/1.0/"],this.acceptV0Meta=null===(r=null==t?void 0:t.acceptV0Meta)||void 0===r||r}get name(){return"VRMMetaLoaderPlugin"}afterRoot(e){return o(this,void 0,void 0,function*(){e.userData.vrmMeta=yield this._import(e)})}_import(e){return o(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(null!=t)return t;let i=yield this._v0Import(e);return null!=i?i:null})}_v1Import(e){var t,i,n;return o(this,void 0,void 0,function*(){let e;let r=this.parser.json,o=(null===(t=r.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!o)return null;let s=null===(i=r.extensions)||void 0===i?void 0:i.VRMC_vrm;if(null==s)return null;let a=s.specVersion;if(!eR.has(a))return console.warn(`VRMMetaLoaderPlugin: Unknown VRMC_vrm specVersion "${a}"`),null;let l=s.meta;if(!l)return null;let u=l.licenseUrl,d=new Set(this.acceptLicenseUrls);if(!d.has(u))throw Error(`VRMMetaLoaderPlugin: The license url "${u}" is not accepted`);return this.needThumbnailImage&&null!=l.thumbnailImage&&(e=null!==(n=yield this._extractGLTFImage(l.thumbnailImage))&&void 0!==n?n:void 0),{metaVersion:"1",name:l.name,version:l.version,authors:l.authors,copyrightInformation:l.copyrightInformation,contactInformation:l.contactInformation,references:l.references,thirdPartyLicenses:l.thirdPartyLicenses,thumbnailImage:e,licenseUrl:l.licenseUrl,avatarPermission:l.avatarPermission,allowExcessivelyViolentUsage:l.allowExcessivelyViolentUsage,allowExcessivelySexualUsage:l.allowExcessivelySexualUsage,commercialUsage:l.commercialUsage,allowPoliticalOrReligiousUsage:l.allowPoliticalOrReligiousUsage,allowAntisocialOrHateUsage:l.allowAntisocialOrHateUsage,creditNotation:l.creditNotation,allowRedistribution:l.allowRedistribution,modification:l.modification,otherLicenseUrl:l.otherLicenseUrl}})}_v0Import(e){var t;return o(this,void 0,void 0,function*(){let e;let i=this.parser.json,n=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!n)return null;let r=n.meta;if(!r)return null;if(!this.acceptV0Meta)throw Error("VRMMetaLoaderPlugin: Attempted to load VRM0.0 meta but acceptV0Meta is false");return this.needThumbnailImage&&null!=r.texture&&-1!==r.texture&&(e=yield this.parser.getDependency("texture",r.texture)),{metaVersion:"0",allowedUserName:r.allowedUserName,author:r.author,commercialUssageName:r.commercialUssageName,contactInformation:r.contactInformation,licenseName:r.licenseName,otherLicenseUrl:r.otherLicenseUrl,otherPermissionUrl:r.otherPermissionUrl,reference:r.reference,sexualUssageName:r.sexualUssageName,texture:null!=e?e:void 0,title:r.title,version:r.version,violentUssageName:r.violentUssageName}})}_extractGLTFImage(e){var t;return o(this,void 0,void 0,function*(){var i,r;let o=this.parser.json,s=null===(t=o.images)||void 0===t?void 0:t[e];if(null==s)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image doesn't exist`),null;let a=s.uri;if(null!=s.bufferView){let e=yield this.parser.getDependency("bufferView",s.bufferView),t=new Blob([e],{type:s.mimeType});a=URL.createObjectURL(t)}if(null==a)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image couldn't load properly`),null;let l=new n.ImageLoader;return yield l.loadAsync((i=a,r=this.parser.options.path,"string"!=typeof i||""===i?"":(/^https?:\/\//i.test(r)&&/^\//.test(i)&&(r=r.replace(/(^https?:\/\/[^/]+).*/i,"$1")),/^(https?:)?\/\//i.test(i)||/^data:.*,.*$/i.test(i)||/^blob:.*$/i.test(i))?i:r+i)).catch(e=>(console.error(e),console.warn("VRMMetaLoaderPlugin: Failed to load a thumbnail image"),null))})}}class eP{constructor(e){this.scene=e.scene,this.meta=e.meta,this.humanoid=e.humanoid,this.expressionManager=e.expressionManager,this.firstPerson=e.firstPerson,this.lookAt=e.lookAt}update(e){this.humanoid.update(),this.lookAt&&this.lookAt.update(e),this.expressionManager&&this.expressionManager.update()}}class eS extends eP{constructor(e){super(e),this.materials=e.materials,this.springBoneManager=e.springBoneManager,this.nodeConstraintManager=e.nodeConstraintManager}update(e){super.update(e),this.nodeConstraintManager&&this.nodeConstraintManager.update(),this.springBoneManager&&this.springBoneManager.update(e),this.materials&&this.materials.forEach(t=>{t.update&&t.update(e)})}}function eA(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(s,a)}l((n=n.apply(e,t||[])).next())})}/*!
 * @pixiv/three-vrm-materials-mtoon v1.0.7
 * MToon (toon material) module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-materials-mtoon is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */function eL(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(s,a)}l((n=n.apply(e,t||[])).next())})}let eb={None:"none",Normal:"normal",LitShadeRate:"litShadeRate",UV:"uv"},eI={None:"none",WorldCoordinates:"worldCoordinates",ScreenCoordinates:"screenCoordinates"},eU=e=>{if(parseInt(n.REVISION,10)>=136)switch(e){case n.LinearEncoding:return["Linear","( value )"];case n.sRGBEncoding:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}else switch(e){case n.LinearEncoding:return["Linear","( value )"];case n.sRGBEncoding:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw Error("unsupported encoding: "+e)}},eO=(e,t)=>{let i=eU(t);return"vec4 "+e+"( vec4 value ) { return "+i[0]+"ToLinear"+i[1]+"; }"};function eV(e,t){let i;return i=e&&e.isTexture?e.encoding:n.LinearEncoding,parseInt(n.REVISION,10)>=133&&t&&e&&e.isTexture&&e.format===n.RGBAFormat&&e.type===n.UnsignedByteType&&e.encoding===n.sRGBEncoding&&(i=n.LinearEncoding),i}class eN extends n.ShaderMaterial{constructor(e={}){super({vertexShader:"// #define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n  varying vec3 vNormal;\n#endif\n\n#include <common>\n\n// #include <uv_pars_vertex>\n#ifdef MTOON_USE_UV\n  varying vec2 vUv;\n  uniform mat3 uvTransform;\n#endif\n\n#include <uv2_pars_vertex>\n// #include <displacementmap_pars_vertex>\n// #include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n  uniform sampler2D outlineWidthMultiplyTexture;\n  uniform mat3 outlineWidthMultiplyTextureUvTransform;\n#endif\n\nuniform float outlineWidthFactor;\n\nvoid main() {\n\n  // #include <uv_vertex>\n  #ifdef MTOON_USE_UV\n    vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n  #endif\n\n  #include <uv2_vertex>\n  #include <color_vertex>\n\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n\n  // we need this to compute the outline properly\n  objectNormal = normalize( objectNormal );\n\n  #include <defaultnormal_vertex>\n\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize( transformedNormal );\n  #endif\n\n  #include <begin_vertex>\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  // #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n\n  vViewPosition = - mvPosition.xyz;\n\n  float outlineTex = 1.0;\n\n  #ifdef OUTLINE\n    #ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n      vec2 outlineWidthMultiplyTextureUv = ( outlineWidthMultiplyTextureUvTransform * vec3( vUv, 1 ) ).xy;\n      outlineTex = texture2D( outlineWidthMultiplyTexture, outlineWidthMultiplyTextureUv ).g;\n    #endif\n\n    #ifdef OUTLINE_WIDTH_WORLD\n      float worldNormalLength = length( transformedNormal );\n      vec3 outlineOffset = outlineWidthFactor * outlineTex * worldNormalLength * objectNormal;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\n    #endif\n\n    #ifdef OUTLINE_WIDTH_SCREEN\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n      vec2 projectedNormal = normalize( clipNormal.xy );\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\n      gl_Position.xy += 2.0 * outlineWidthFactor * outlineTex * projectedNormal.xy;\n    #endif\n\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\n  #endif\n\n  #include <worldpos_vertex>\n  // #include <envmap_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n\n}",fragmentShader:'// #define PHONG\n\nuniform vec3 litFactor;\n\nuniform float opacity;\n\nuniform vec3 shadeColorFactor;\n#ifdef USE_SHADEMULTIPLYTEXTURE\n  uniform sampler2D shadeMultiplyTexture;\n  uniform mat3 shadeMultiplyTextureUvTransform;\n#endif\n\nuniform float shadingShiftFactor;\nuniform float shadingToonyFactor;\n\n#ifdef USE_SHADINGSHIFTTEXTURE\n  uniform sampler2D shadingShiftTexture;\n  uniform mat3 shadingShiftTextureUvTransform;\n  uniform float shadingShiftTextureScale;\n#endif\n\nuniform float giEqualizationFactor;\n\nuniform vec3 parametricRimColorFactor;\n#ifdef USE_RIMMULTIPLYTEXTURE\n  uniform sampler2D rimMultiplyTexture;\n  uniform mat3 rimMultiplyTextureUvTransform;\n#endif\nuniform float rimLightingMixFactor;\nuniform float parametricRimFresnelPowerFactor;\nuniform float parametricRimLiftFactor;\n\n#ifdef USE_MATCAPTEXTURE\n  uniform vec3 matcapFactor;\n  uniform sampler2D matcapTexture;\n  uniform mat3 matcapTextureUvTransform;\n#endif\n\nuniform vec3 emissive;\nuniform float emissiveIntensity;\n\nuniform vec3 outlineColorFactor;\nuniform float outlineLightingMixFactor;\n\n#ifdef USE_UVANIMATIONMASKTEXTURE\n  uniform sampler2D uvAnimationMaskTexture;\n  uniform mat3 uvAnimationMaskTextureUvTransform;\n#endif\n\nuniform float uvAnimationScrollXOffset;\nuniform float uvAnimationScrollYOffset;\nuniform float uvAnimationRotationPhase;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n// #include <uv_pars_fragment>\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n  varying vec2 vUv;\n#endif\n\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n\n#ifdef USE_MAP\n  uniform mat3 mapUvTransform;\n#endif\n\n// #include <alphamap_pars_fragment>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <alphatest_pars_fragment>\n#endif\n\n#include <aomap_pars_fragment>\n// #include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n\n#ifdef USE_EMISSIVEMAP\n  uniform mat3 emissiveMapUvTransform;\n#endif\n\n// #include <envmap_common_pars_fragment>\n// #include <envmap_pars_fragment>\n// #include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n\n// #include <bsdfs>\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n  return RECIPROCAL_PI * diffuseColor;\n}\n\n#include <lights_pars_begin>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <normal_pars_fragment>\n#endif\n\n// #include <lights_phong_pars_fragment>\nvarying vec3 vViewPosition;\n\n#if THREE_VRM_THREE_REVISION < 132\n  #ifndef FLAT_SHADED\n    varying vec3 vNormal;\n  #endif\n#endif\n\nstruct MToonMaterial {\n  vec3 diffuseColor;\n  vec3 shadeColor;\n  float shadingShift;\n};\n\nfloat linearstep( float a, float b, float t ) {\n  return clamp( ( t - a ) / ( b - a ), 0.0, 1.0 );\n}\n\n/**\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\n */\nfloat getShading(\n  const in float dotNL,\n  const in float shadow,\n  const in float shadingShift\n) {\n  float shading = dotNL;\n  shading = shading + shadingShift;\n  shading = linearstep( -1.0 + shadingToonyFactor, 1.0 - shadingToonyFactor, shading );\n  shading *= shadow;\n  return shading;\n}\n\n/**\n * Mix diffuseColor and shadeColor using shading factor and light color\n */\nvec3 getDiffuse(\n  const in MToonMaterial material,\n  const in float shading,\n  in vec3 lightColor\n) {\n  #ifdef DEBUG_LITSHADERATE\n    return vec3( BRDF_Lambert( shading * lightColor ) );\n  #endif\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      lightColor *= PI;\n    #endif\n  #endif\n\n  vec3 col = lightColor * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, shading ) );\n\n  // The "comment out if you want to PBR absolutely" line\n  #ifdef V0_COMPAT_SHADE\n    col = min( col, material.diffuseColor );\n  #endif\n\n  return col;\n}\n\nvoid RE_Direct_MToon( const in IncidentLight directLight, const in GeometricContext geometry, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\n  float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n  vec3 irradiance = directLight.color;\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      irradiance *= PI;\n    #endif\n  #endif\n\n  // directSpecular will be used for rim lighting, not an actual specular\n  reflectedLight.directSpecular += irradiance;\n\n  irradiance *= dotNL;\n\n  float shading = getShading( dotNL, shadow, material.shadingShift );\n\n  // toon shaded diffuse\n  reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\n}\n\nvoid RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in GeometricContext geometry, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\n  // indirect diffuse will use diffuseColor, no shadeColor involved\n  reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n  // directSpecular will be used for rim lighting, not an actual specular\n  reflectedLight.directSpecular += irradiance;\n}\n\n#define RE_Direct RE_Direct_MToon\n#define RE_IndirectDiffuse RE_IndirectDiffuse_MToon\n#define Material_LightProbeLOD( material ) (0)\n\n#include <shadowmap_pars_fragment>\n// #include <bumpmap_pars_fragment>\n\n// #include <normalmap_pars_fragment>\n#ifdef USE_NORMALMAP\n\n  uniform sampler2D normalMap;\n  uniform mat3 normalMapUvTransform;\n  uniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n  uniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && defined ( TANGENTSPACE_NORMALMAP )\n\n  // Per-Pixel Tangent Space Normal Mapping\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\n\n  // Temporary compat against shader change @ Three.js r126\n  // See: #21205, #21307, #21299\n  #if THREE_VRM_THREE_REVISION >= 126\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = normalize( surf_norm );\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n    }\n\n  #else\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      S = normalize( S );\n      T = normalize( T );\n      vec3 N = normalize( surf_norm );\n\n      #ifdef DOUBLE_SIDED\n\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\n      #else\n\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n      mat3 tsn = mat3( S, T, N );\n      return normalize( tsn * mapN );\n\n    }\n\n  #endif\n\n#endif\n\n// #include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// == post correction ==========================================================\nvoid postCorrection() {\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n}\n\n// == main procedure ===========================================================\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec2 uv = vec2(0.5, 0.5);\n\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n    uv = vUv;\n\n    float uvAnimMask = 1.0;\n    #ifdef USE_UVANIMATIONMASKTEXTURE\n      vec2 uvAnimationMaskTextureUv = ( uvAnimationMaskTextureUvTransform * vec3( uv, 1 ) ).xy;\n      uvAnimMask = texture2D( uvAnimationMaskTexture, uvAnimationMaskTextureUv ).b;\n    #endif\n\n    uv = uv + vec2( uvAnimationScrollXOffset, uvAnimationScrollYOffset ) * uvAnimMask;\n    float uvRotCos = cos( uvAnimationRotationPhase * uvAnimMask );\n    float uvRotSin = sin( uvAnimationRotationPhase * uvAnimMask );\n    uv = mat2( uvRotCos, -uvRotSin, uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\n  #endif\n\n  #ifdef DEBUG_UV\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\n    #endif\n    return;\n  #endif\n\n  vec4 diffuseColor = vec4( litFactor, opacity );\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n  vec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n  #include <logdepthbuf_fragment>\n\n  // #include <map_fragment>\n  #ifdef USE_MAP\n    vec2 mapUv = ( mapUvTransform * vec3( uv, 1 ) ).xy;\n    #if THREE_VRM_THREE_REVISION >= 137\n      vec4 sampledDiffuseColor = texture2D( map, mapUv );\n      #ifdef DECODE_VIDEO_TEXTURE\n        sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n      #endif\n      diffuseColor *= sampledDiffuseColor;\n    #else\n      // COMPAT: pre-r137\n      vec4 texelColor = texture2D( map, mapUv );\n      texelColor = mapTexelToLinear( texelColor );\n      diffuseColor *= texelColor;\n    #endif\n  #endif\n\n  // #include <color_fragment>\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    diffuseColor.rgb *= vColor;\n  #endif\n\n  // #include <alphamap_fragment>\n\n  #include <alphatest_fragment>\n\n  // #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n\n  #ifdef OUTLINE\n    normal *= -1.0;\n  #endif\n\n  // #include <normal_fragment_maps>\n\n  #ifdef OBJECTSPACE_NORMALMAP\n\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\n    normal = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n    #ifdef FLIP_SIDED\n\n      normal = - normal;\n\n    #endif\n\n    #ifdef DOUBLE_SIDED\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = normal * faceDirection;\n\n      #else\n\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n    #endif\n\n    normal = normalize( normalMatrix * normal );\n\n  #elif defined( TANGENTSPACE_NORMALMAP )\n\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\n    vec3 mapN = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0;\n    mapN.xy *= normalScale;\n\n    #ifdef USE_TANGENT\n\n      normal = normalize( vTBN * mapN );\n\n    #else\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\n\n      #else\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\n\n      #endif\n\n    #endif\n\n  #endif\n\n  // #include <emissivemap_fragment>\n  #ifdef USE_EMISSIVEMAP\n    vec2 emissiveMapUv = ( emissiveMapUvTransform * vec3( uv, 1 ) ).xy;\n    #if THREE_VRM_THREE_REVISION >= 137\n      totalEmissiveRadiance *= texture2D( emissiveMap, emissiveMapUv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      totalEmissiveRadiance *= emissiveMapTexelToLinear( texture2D( emissiveMap, emissiveMapUv ) ).rgb;\n    #endif\n  #endif\n\n  #ifdef DEBUG_NORMAL\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\n    return;\n  #endif\n\n  // -- MToon: lighting --------------------------------------------------------\n  // accumulation\n  // #include <lights_phong_fragment>\n  MToonMaterial material;\n\n  material.diffuseColor = diffuseColor.rgb;\n\n  material.shadeColor = shadeColorFactor;\n  #ifdef USE_SHADEMULTIPLYTEXTURE\n    vec2 shadeMultiplyTextureUv = ( shadeMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    #if THREE_VRM_THREE_REVISION >= 137\n      material.shadeColor *= texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      material.shadeColor *= shadeMultiplyTextureTexelToLinear( texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv) ).rgb;\n    #endif\n  #endif\n\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    material.shadeColor.rgb *= vColor;\n  #endif\n\n  material.shadingShift = shadingShiftFactor;\n  #ifdef USE_SHADINGSHIFTTEXTURE\n    vec2 shadingShiftTextureUv = ( shadingShiftTextureUvTransform * vec3( uv, 1 ) ).xy;\n    material.shadingShift += texture2D( shadingShiftTexture, shadingShiftTextureUv ).r * shadingShiftTextureScale;\n  #endif\n\n  // #include <lights_fragment_begin>\n\n  // MToon Specific changes:\n  // Since we want to take shadows into account of shading instead of irradiance,\n  // we had to modify the codes that multiplies the results of shadowmap into color of direct lights.\n\n  GeometricContext geometry;\n\n  geometry.position = - vViewPosition;\n  geometry.normal = normal;\n  geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n  #ifdef CLEARCOAT\n\n    geometry.clearcoatNormal = clearcoatNormal;\n\n  #endif\n\n  IncidentLight directLight;\n\n  // since these variables will be used in unrolled loop, we have to define in prior\n  float shadow;\n\n  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    PointLight pointLight;\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n    PointLightShadow pointLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n      pointLight = pointLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getPointLightInfo( pointLight, geometry, directLight );\n      #else\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n      pointLightShadow = pointLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    SpotLight spotLight;\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n    SpotLightShadow spotLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n      spotLight = spotLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getSpotLightInfo( spotLight, geometry, directLight );\n      #else\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n      spotLightShadow = spotLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n    DirectionalLight directionalLight;\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n    DirectionalLightShadow directionalLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n      directionalLight = directionalLights[ i ];\n\n      #if THREE_VRM_THREE_REVISION >= 132\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\n      #else\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n      directionalLightShadow = directionalLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  // #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n  //   RectAreaLight rectAreaLight;\n\n  //   #pragma unroll_loop_start\n  //   for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n  //     rectAreaLight = rectAreaLights[ i ];\n  //     RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n  //   }\n  //   #pragma unroll_loop_end\n\n  // #endif\n\n  #if defined( RE_IndirectDiffuse )\n\n    vec3 iblIrradiance = vec3( 0.0 );\n\n    vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n    #if THREE_VRM_THREE_REVISION >= 133\n      irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n    #else\n      irradiance += getLightProbeIrradiance( lightProbe, geometry );\n    #endif\n\n    #if ( NUM_HEMI_LIGHTS > 0 )\n\n      #pragma unroll_loop_start\n      for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n        #if THREE_VRM_THREE_REVISION >= 133\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n        #else\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n        #endif\n\n      }\n      #pragma unroll_loop_end\n\n    #endif\n\n  #endif\n\n  // #if defined( RE_IndirectSpecular )\n\n  //   vec3 radiance = vec3( 0.0 );\n  //   vec3 clearcoatRadiance = vec3( 0.0 );\n\n  // #endif\n\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n\n  // modulation\n  #include <aomap_fragment>\n\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\n  #ifdef DEBUG_LITSHADERATE\n    gl_FragColor = vec4( col, diffuseColor.a );\n    postCorrection();\n    return;\n  #endif\n\n  // -- MToon: rim lighting -----------------------------------------\n  vec3 viewDir = normalize( vViewPosition );\n\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\n    reflectedLight.directSpecular /= PI;\n  #endif\n  vec3 rimMix = mix( vec3( 1.0 ), reflectedLight.directSpecular, 1.0 );\n\n  vec3 rim = parametricRimColorFactor * pow( saturate( 1.0 - dot( viewDir, normal ) + parametricRimLiftFactor ), parametricRimFresnelPowerFactor );\n\n  #ifdef USE_MATCAPTEXTURE\n    {\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\n      sphereUv = ( matcapTextureUvTransform * vec3( sphereUv, 1 ) ).xy;\n      #if THREE_VRM_THREE_REVISION >= 137\n        vec3 matcap = texture2D( matcapTexture, sphereUv ).rgb;\n      #else\n        // COMPAT: pre-r137\n        vec3 matcap = matcapTextureTexelToLinear( texture2D( matcapTexture, sphereUv ) ).rgb;\n      #endif\n      rim += matcapFactor * matcap;\n    }\n  #endif\n\n  #ifdef USE_RIMMULTIPLYTEXTURE\n    vec2 rimMultiplyTextureUv = ( rimMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    #if THREE_VRM_THREE_REVISION >= 137\n      rim *= texture2D( rimMultiplyTexture, rimMultiplyTextureUv ).rgb;\n    #else\n      // COMPAT: pre-r137\n      rim *= rimMultiplyTextureTexelToLinear( texture2D( rimMultiplyTexture, rimMultiplyTextureUv ) ).rgb;\n    #endif\n  #endif\n\n  col += rimMix * rim;\n\n  // -- MToon: Emission --------------------------------------------------------\n  col += totalEmissiveRadiance;\n\n  // #include <envmap_fragment>\n\n  // -- Almost done! -----------------------------------------------------------\n  #if defined( OUTLINE )\n    col = outlineColorFactor.rgb * mix( vec3( 1.0 ), col, outlineLightingMixFactor );\n  #endif\n\n  gl_FragColor = vec4( col, diffuseColor.a );\n  postCorrection();\n}\n'}),this.uvAnimationScrollXSpeedFactor=0,this.uvAnimationScrollYSpeedFactor=0,this.uvAnimationRotationSpeedFactor=0,this.fog=!0,this.normalMapType=n.TangentSpaceNormalMap,this._ignoreVertexColor=!0,this._v0CompatShade=!1,this._debugMode=eb.None,this._outlineWidthMode=eI.None,this._isOutline=!1,e.transparentWithZWrite&&(e.depthWrite=!0),delete e.transparentWithZWrite,e.fog=!0,e.lights=!0,e.clipping=!0,129>parseInt(n.REVISION,10)&&(e.skinning=e.skinning||!1),131>parseInt(n.REVISION,10)&&(e.morphTargets=e.morphTargets||!1,e.morphNormals=e.morphNormals||!1),this.uniforms=n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.normalmap,n.UniformsLib.emissivemap,n.UniformsLib.fog,n.UniformsLib.lights,{litFactor:{value:new n.Color(1,1,1)},mapUvTransform:{value:new n.Matrix3},colorAlpha:{value:1},normalMapUvTransform:{value:new n.Matrix3},shadeColorFactor:{value:new n.Color(.97,.81,.86)},shadeMultiplyTexture:{value:null},shadeMultiplyTextureUvTransform:{value:new n.Matrix3},shadingShiftFactor:{value:0},shadingShiftTexture:{value:null},shadingShiftTextureUvTransform:{value:new n.Matrix3},shadingShiftTextureScale:{value:null},shadingToonyFactor:{value:.9},giEqualizationFactor:{value:.9},matcapFactor:{value:new n.Color(0,0,0)},matcapTexture:{value:null},matcapTextureUvTransform:{value:new n.Matrix3},parametricRimColorFactor:{value:new n.Color(0,0,0)},rimMultiplyTexture:{value:null},rimMultiplyTextureUvTransform:{value:new n.Matrix3},rimLightingMixFactor:{value:0},parametricRimFresnelPowerFactor:{value:1},parametricRimLiftFactor:{value:0},emissive:{value:new n.Color(0,0,0)},emissiveIntensity:{value:1},emissiveMapUvTransform:{value:new n.Matrix3},outlineWidthMultiplyTexture:{value:null},outlineWidthMultiplyTextureUvTransform:{value:new n.Matrix3},outlineWidthFactor:{value:.5},outlineColorFactor:{value:new n.Color(0,0,0)},outlineLightingMixFactor:{value:1},uvAnimationMaskTexture:{value:null},uvAnimationMaskTextureUvTransform:{value:new n.Matrix3},uvAnimationScrollXOffset:{value:0},uvAnimationScrollYOffset:{value:0},uvAnimationRotationPhase:{value:0}},e.uniforms]),this.setValues(e),this._uploadUniformsWorkaround(),this.customProgramCacheKey=()=>[this._ignoreVertexColor?"ignoreVertexColor":"",this._v0CompatShade?"v0CompatShade":"","none"!==this._debugMode?`debugMode:${this._debugMode}`:"","none"!==this._outlineWidthMode?`outlineWidthMode:${this._outlineWidthMode}`:"",this._isOutline?"isOutline":"",...Object.entries(this._generateDefines()).map(([e,t])=>`${e}:${t}`),this.matcapTexture?`matcapTextureEncoding:${this.matcapTexture.encoding}`:"",this.shadeMultiplyTexture?`shadeMultiplyTextureEncoding:${this.shadeMultiplyTexture.encoding}`:"",this.rimMultiplyTexture?`rimMultiplyTextureEncoding:${this.rimMultiplyTexture.encoding}`:""].join(","),this.onBeforeCompile=(e,t)=>{let i=t.capabilities.isWebGL2,r=parseInt(n.REVISION,10),o=Object.entries(Object.assign(Object.assign({},this._generateDefines()),this.defines)).filter(([e,t])=>!!t).map(([e,t])=>`#define ${e} ${t}`).join("\n")+"\n",s="";137>parseInt(n.REVISION,10)&&(s=(null!==this.matcapTexture?eO("matcapTextureTexelToLinear",eV(this.matcapTexture,i))+"\n":"")+(null!==this.shadeMultiplyTexture?eO("shadeMultiplyTextureTexelToLinear",eV(this.shadeMultiplyTexture,i))+"\n":"")+(null!==this.rimMultiplyTexture?eO("rimMultiplyTextureTexelToLinear",eV(this.rimMultiplyTexture,i))+"\n":"")),e.vertexShader=o+e.vertexShader,e.fragmentShader=o+s+e.fragmentShader,r<132&&(e.fragmentShader=e.fragmentShader.replace("#include <normal_pars_fragment>",""),e.fragmentShader=e.fragmentShader.replace("#include <alphatest_pars_fragment>",""))}}get color(){return this.uniforms.litFactor.value}set color(e){this.uniforms.litFactor.value=e}get map(){return this.uniforms.map.value}set map(e){this.uniforms.map.value=e}get normalMap(){return this.uniforms.normalMap.value}set normalMap(e){this.uniforms.normalMap.value=e}get normalScale(){return this.uniforms.normalScale.value}set normalScale(e){this.uniforms.normalScale.value=e}get emissive(){return this.uniforms.emissive.value}set emissive(e){this.uniforms.emissive.value=e}get emissiveIntensity(){return this.uniforms.emissiveIntensity.value}set emissiveIntensity(e){this.uniforms.emissiveIntensity.value=e}get emissiveMap(){return this.uniforms.emissiveMap.value}set emissiveMap(e){this.uniforms.emissiveMap.value=e}get shadeColorFactor(){return this.uniforms.shadeColorFactor.value}set shadeColorFactor(e){this.uniforms.shadeColorFactor.value=e}get shadeMultiplyTexture(){return this.uniforms.shadeMultiplyTexture.value}set shadeMultiplyTexture(e){this.uniforms.shadeMultiplyTexture.value=e}get shadingShiftFactor(){return this.uniforms.shadingShiftFactor.value}set shadingShiftFactor(e){this.uniforms.shadingShiftFactor.value=e}get shadingShiftTexture(){return this.uniforms.shadingShiftTexture.value}set shadingShiftTexture(e){this.uniforms.shadingShiftTexture.value=e}get shadingShiftTextureScale(){return this.uniforms.shadingShiftTextureScale.value}set shadingShiftTextureScale(e){this.uniforms.shadingShiftTextureScale.value=e}get shadingToonyFactor(){return this.uniforms.shadingToonyFactor.value}set shadingToonyFactor(e){this.uniforms.shadingToonyFactor.value=e}get giEqualizationFactor(){return this.uniforms.giEqualizationFactor.value}set giEqualizationFactor(e){this.uniforms.giEqualizationFactor.value=e}get matcapFactor(){return this.uniforms.matcapFactor.value}set matcapFactor(e){this.uniforms.matcapFactor.value=e}get matcapTexture(){return this.uniforms.matcapTexture.value}set matcapTexture(e){this.uniforms.matcapTexture.value=e}get parametricRimColorFactor(){return this.uniforms.parametricRimColorFactor.value}set parametricRimColorFactor(e){this.uniforms.parametricRimColorFactor.value=e}get rimMultiplyTexture(){return this.uniforms.rimMultiplyTexture.value}set rimMultiplyTexture(e){this.uniforms.rimMultiplyTexture.value=e}get rimLightingMixFactor(){return this.uniforms.rimLightingMixFactor.value}set rimLightingMixFactor(e){this.uniforms.rimLightingMixFactor.value=e}get parametricRimFresnelPowerFactor(){return this.uniforms.parametricRimFresnelPowerFactor.value}set parametricRimFresnelPowerFactor(e){this.uniforms.parametricRimFresnelPowerFactor.value=e}get parametricRimLiftFactor(){return this.uniforms.parametricRimLiftFactor.value}set parametricRimLiftFactor(e){this.uniforms.parametricRimLiftFactor.value=e}get outlineWidthMultiplyTexture(){return this.uniforms.outlineWidthMultiplyTexture.value}set outlineWidthMultiplyTexture(e){this.uniforms.outlineWidthMultiplyTexture.value=e}get outlineWidthFactor(){return this.uniforms.outlineWidthFactor.value}set outlineWidthFactor(e){this.uniforms.outlineWidthFactor.value=e}get outlineColorFactor(){return this.uniforms.outlineColorFactor.value}set outlineColorFactor(e){this.uniforms.outlineColorFactor.value=e}get outlineLightingMixFactor(){return this.uniforms.outlineLightingMixFactor.value}set outlineLightingMixFactor(e){this.uniforms.outlineLightingMixFactor.value=e}get uvAnimationMaskTexture(){return this.uniforms.uvAnimationMaskTexture.value}set uvAnimationMaskTexture(e){this.uniforms.uvAnimationMaskTexture.value=e}get uvAnimationScrollXOffset(){return this.uniforms.uvAnimationScrollXOffset.value}set uvAnimationScrollXOffset(e){this.uniforms.uvAnimationScrollXOffset.value=e}get uvAnimationScrollYOffset(){return this.uniforms.uvAnimationScrollYOffset.value}set uvAnimationScrollYOffset(e){this.uniforms.uvAnimationScrollYOffset.value=e}get uvAnimationRotationPhase(){return this.uniforms.uvAnimationRotationPhase.value}set uvAnimationRotationPhase(e){this.uniforms.uvAnimationRotationPhase.value=e}get ignoreVertexColor(){return this._ignoreVertexColor}set ignoreVertexColor(e){this._ignoreVertexColor=e,this.needsUpdate=!0}get v0CompatShade(){return this._v0CompatShade}set v0CompatShade(e){this._v0CompatShade=e,this.needsUpdate=!0}get debugMode(){return this._debugMode}set debugMode(e){this._debugMode=e,this.needsUpdate=!0}get outlineWidthMode(){return this._outlineWidthMode}set outlineWidthMode(e){this._outlineWidthMode=e,this.needsUpdate=!0}get isOutline(){return this._isOutline}set isOutline(e){this._isOutline=e,this.needsUpdate=!0}get isMToonMaterial(){return!0}update(e){this._uploadUniformsWorkaround(),this._updateUVAnimation(e)}copy(e){return super.copy(e),this.map=e.map,this.normalMap=e.normalMap,this.emissiveMap=e.emissiveMap,this.shadeMultiplyTexture=e.shadeMultiplyTexture,this.shadingShiftTexture=e.shadingShiftTexture,this.matcapTexture=e.matcapTexture,this.rimMultiplyTexture=e.rimMultiplyTexture,this.outlineWidthMultiplyTexture=e.outlineWidthMultiplyTexture,this.uvAnimationMaskTexture=e.uvAnimationMaskTexture,this.normalMapType=e.normalMapType,this.uvAnimationScrollXSpeedFactor=e.uvAnimationScrollXSpeedFactor,this.uvAnimationScrollYSpeedFactor=e.uvAnimationScrollYSpeedFactor,this.uvAnimationRotationSpeedFactor=e.uvAnimationRotationSpeedFactor,this.ignoreVertexColor=e.ignoreVertexColor,this.v0CompatShade=e.v0CompatShade,this.debugMode=e.debugMode,this.outlineWidthMode=e.outlineWidthMode,this.isOutline=e.isOutline,this.needsUpdate=!0,this}_updateUVAnimation(e){this.uniforms.uvAnimationScrollXOffset.value+=e*this.uvAnimationScrollXSpeedFactor,this.uniforms.uvAnimationScrollYOffset.value+=e*this.uvAnimationScrollYSpeedFactor,this.uniforms.uvAnimationRotationPhase.value+=e*this.uvAnimationRotationSpeedFactor,this.uniformsNeedUpdate=!0}_uploadUniformsWorkaround(){this.uniforms.opacity.value=this.opacity,this._updateTextureMatrix(this.uniforms.map,this.uniforms.mapUvTransform),this._updateTextureMatrix(this.uniforms.normalMap,this.uniforms.normalMapUvTransform),this._updateTextureMatrix(this.uniforms.emissiveMap,this.uniforms.emissiveMapUvTransform),this._updateTextureMatrix(this.uniforms.shadeMultiplyTexture,this.uniforms.shadeMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.shadingShiftTexture,this.uniforms.shadingShiftTextureUvTransform),this._updateTextureMatrix(this.uniforms.matcapTexture,this.uniforms.matcapTextureUvTransform),this._updateTextureMatrix(this.uniforms.rimMultiplyTexture,this.uniforms.rimMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.outlineWidthMultiplyTexture,this.uniforms.outlineWidthMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.uvAnimationMaskTexture,this.uniforms.uvAnimationMaskTextureUvTransform);let e=parseInt(n.REVISION,10);e>=132&&(this.uniforms.alphaTest.value=this.alphaTest),this.uniformsNeedUpdate=!0}_generateDefines(){let e=parseInt(n.REVISION,10),t=null!==this.outlineWidthMultiplyTexture,i=null!==this.map||null!==this.emissiveMap||null!==this.shadeMultiplyTexture||null!==this.shadingShiftTexture||null!==this.rimMultiplyTexture||null!==this.uvAnimationMaskTexture;return{THREE_VRM_THREE_REVISION:e,OUTLINE:this._isOutline,MTOON_USE_UV:t||i,MTOON_UVS_VERTEX_ONLY:t&&!i,V0_COMPAT_SHADE:this._v0CompatShade,USE_SHADEMULTIPLYTEXTURE:null!==this.shadeMultiplyTexture,USE_SHADINGSHIFTTEXTURE:null!==this.shadingShiftTexture,USE_MATCAPTEXTURE:null!==this.matcapTexture,USE_RIMMULTIPLYTEXTURE:null!==this.rimMultiplyTexture,USE_OUTLINEWIDTHMULTIPLYTEXTURE:null!==this.outlineWidthMultiplyTexture,USE_UVANIMATIONMASKTEXTURE:null!==this.uvAnimationMaskTexture,IGNORE_VERTEX_COLOR:!0===this._ignoreVertexColor,DEBUG_NORMAL:"normal"===this._debugMode,DEBUG_LITSHADERATE:"litShadeRate"===this._debugMode,DEBUG_UV:"uv"===this._debugMode,OUTLINE_WIDTH_WORLD:this._outlineWidthMode===eI.WorldCoordinates,OUTLINE_WIDTH_SCREEN:this._outlineWidthMode===eI.ScreenCoordinates}}_updateTextureMatrix(e,t){e.value&&(e.value.matrixAutoUpdate&&e.value.updateMatrix(),t.value.copy(e.value.matrix))}}class eC{constructor(e,t){this._parser=e,this._materialParams=t,this._pendings=[]}get pending(){return Promise.all(this._pendings)}assignPrimitive(e,t){null!=t&&(this._materialParams[e]=t)}assignColor(e,t,i){null!=t&&(this._materialParams[e]=new n.Color().fromArray(t),i&&this._materialParams[e].convertSRGBToLinear())}assignTexture(e,t,i){return eL(this,void 0,void 0,function*(){let r=eL(this,void 0,void 0,function*(){null!=t&&(yield this._parser.assignTexture(this._materialParams,e,t),i&&(this._materialParams[e].encoding=n.sRGBEncoding))});return this._pendings.push(r),r})}assignTextureByIndex(e,t,i){return eL(this,void 0,void 0,function*(){return this.assignTexture(e,null!=t?{index:t}:void 0,i)})}}let eD=new Set(["1.0","1.0-beta"]);class eF{constructor(e,t={}){var i,n,r;this.parser=e,this.renderOrderOffset=null!==(i=t.renderOrderOffset)&&void 0!==i?i:0,this.v0CompatShade=null!==(n=t.v0CompatShade)&&void 0!==n&&n,this.debugMode=null!==(r=t.debugMode)&&void 0!==r?r:"none",this._mToonMaterialSet=new Set}get name(){return eF.EXTENSION_NAME}beforeRoot(){return eL(this,void 0,void 0,function*(){this._removeUnlitExtensionIfMToonExists()})}afterRoot(e){return eL(this,void 0,void 0,function*(){e.userData.vrmMToonMaterials=Array.from(this._mToonMaterialSet)})}getMaterialType(e){let t=this._getMToonExtension(e);return t?eN:null}extendMaterialParams(e,t){let i=this._getMToonExtension(e);return i?this._extendMaterialParams(i,t):null}loadMesh(e){var t;return eL(this,void 0,void 0,function*(){let i=this.parser,n=i.json,r=null===(t=n.meshes)||void 0===t?void 0:t[e];if(null==r)throw Error(`MToonMaterialLoaderPlugin: Attempt to use meshes[${e}] of glTF but the mesh doesn't exist`);let o=r.primitives,s=yield i.loadMesh(e);if(1===o.length){let e=o[0].material;null!=e&&this._setupPrimitive(s,e)}else for(let e=0;e<o.length;e++){let t=s.children[e],i=o[e].material;null!=i&&this._setupPrimitive(t,i)}return s})}_removeUnlitExtensionIfMToonExists(){let e=this.parser,t=e.json,i=t.materials;null==i||i.map((e,t)=>{var i;let n=this._getMToonExtension(t);n&&(null===(i=e.extensions)||void 0===i?void 0:i.KHR_materials_unlit)&&delete e.extensions.KHR_materials_unlit})}_getMToonExtension(e){var t,i;let n=this.parser,r=n.json,o=null===(t=r.materials)||void 0===t?void 0:t[e];if(null==o){console.warn(`MToonMaterialLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);return}let s=null===(i=o.extensions)||void 0===i?void 0:i[eF.EXTENSION_NAME];if(null==s)return;let a=s.specVersion;if(!eD.has(a)){console.warn(`MToonMaterialLoaderPlugin: Unknown ${eF.EXTENSION_NAME} specVersion "${a}"`);return}return s}_extendMaterialParams(e,t){var i;return eL(this,void 0,void 0,function*(){delete t.metalness,delete t.roughness;let n=new eC(this.parser,t);n.assignPrimitive("transparentWithZWrite",e.transparentWithZWrite),n.assignColor("shadeColorFactor",e.shadeColorFactor),n.assignTexture("shadeMultiplyTexture",e.shadeMultiplyTexture,!0),n.assignPrimitive("shadingShiftFactor",e.shadingShiftFactor),n.assignTexture("shadingShiftTexture",e.shadingShiftTexture,!0),n.assignPrimitive("shadingShiftTextureScale",null===(i=e.shadingShiftTexture)||void 0===i?void 0:i.scale),n.assignPrimitive("shadingToonyFactor",e.shadingToonyFactor),n.assignPrimitive("giEqualizationFactor",e.giEqualizationFactor),n.assignColor("matcapFactor",e.matcapFactor),n.assignTexture("matcapTexture",e.matcapTexture,!0),n.assignColor("parametricRimColorFactor",e.parametricRimColorFactor),n.assignTexture("rimMultiplyTexture",e.rimMultiplyTexture,!0),n.assignPrimitive("rimLightingMixFactor",e.rimLightingMixFactor),n.assignPrimitive("parametricRimFresnelPowerFactor",e.parametricRimFresnelPowerFactor),n.assignPrimitive("parametricRimLiftFactor",e.parametricRimLiftFactor),n.assignPrimitive("outlineWidthMode",e.outlineWidthMode),n.assignPrimitive("outlineWidthFactor",e.outlineWidthFactor),n.assignTexture("outlineWidthMultiplyTexture",e.outlineWidthMultiplyTexture,!1),n.assignColor("outlineColorFactor",e.outlineColorFactor),n.assignPrimitive("outlineLightingMixFactor",e.outlineLightingMixFactor),n.assignTexture("uvAnimationMaskTexture",e.uvAnimationMaskTexture,!1),n.assignPrimitive("uvAnimationScrollXSpeedFactor",e.uvAnimationScrollXSpeedFactor),n.assignPrimitive("uvAnimationScrollYSpeedFactor",e.uvAnimationScrollYSpeedFactor),n.assignPrimitive("uvAnimationRotationSpeedFactor",e.uvAnimationRotationSpeedFactor),n.assignPrimitive("v0CompatShade",this.v0CompatShade),n.assignPrimitive("debugMode",this.debugMode),yield n.pending})}_setupPrimitive(e,t){let i=this._getMToonExtension(t);if(i){let t=this._parseRenderOrder(i);e.renderOrder=t+this.renderOrderOffset,this._generateOutline(e),this._addToMaterialSet(e);return}}_generateOutline(e){let t=e.material;if(!(t instanceof eN)||"none"===t.outlineWidthMode||t.outlineWidthFactor<=0)return;e.material=[t];let i=t.clone();i.name+=" (Outline)",i.isOutline=!0,i.side=n.BackSide,e.material.push(i);let r=e.geometry,o=r.index?r.index.count:r.attributes.position.count/3;r.addGroup(0,o,0),r.addGroup(0,o,1)}_addToMaterialSet(e){let t=e.material,i=new Set;for(let e of(Array.isArray(t)?t.forEach(e=>i.add(e)):i.add(t),i))e instanceof eN&&this._mToonMaterialSet.add(e)}_parseRenderOrder(e){var t;let i=e.transparentWithZWrite;return(i?0:19)+(null!==(t=e.renderQueueOffsetNumber)&&void 0!==t?t:0)}}eF.EXTENSION_NAME="VRMC_materials_mtoon";class eB{constructor(e){this.parser=e}get name(){return eB.EXTENSION_NAME}extendMaterialParams(e,t){var i,n,r,o;return i=this,n=void 0,r=void 0,o=function*(){let i=this._getHDREmissiveMultiplierExtension(e);if(null==i)return;console.warn("VRMMaterialsHDREmissiveMultiplierLoaderPlugin: `VRMC_materials_hdr_emissiveMultiplier` is archived. Use `KHR_materials_emissive_strength` instead.");let n=i.emissiveMultiplier;t.emissiveIntensity=n},new(r||(r=Promise))(function(e,t){function s(e){try{l(o.next(e))}catch(e){t(e)}}function a(e){try{l(o.throw(e))}catch(e){t(e)}}function l(t){var i;t.done?e(t.value):((i=t.value)instanceof r?i:new r(function(e){e(i)})).then(s,a)}l((o=o.apply(i,n||[])).next())})}_getHDREmissiveMultiplierExtension(e){var t,i;let n=this.parser,r=n.json,o=null===(t=r.materials)||void 0===t?void 0:t[e];if(null==o){console.warn(`VRMMaterialsHDREmissiveMultiplierLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);return}let s=null===(i=o.extensions)||void 0===i?void 0:i[eB.EXTENSION_NAME];if(null!=s)return s}}function eH(e){return Math.pow(e,2.2)}eB.EXTENSION_NAME="VRMC_materials_hdr_emissiveMultiplier";class eW{constructor(e){var t;this.parser=e,this._renderQueueMapTransparent=new Map,this._renderQueueMapTransparentZWrite=new Map;let i=this.parser.json;i.extensionsUsed=null!==(t=i.extensionsUsed)&&void 0!==t?t:[],-1===i.extensionsUsed.indexOf("KHR_texture_transform")&&i.extensionsUsed.push("KHR_texture_transform")}get name(){return"VRMMaterialsV0CompatPlugin"}beforeRoot(){var e,t,i,n,r;return t=this,i=void 0,n=void 0,r=function*(){let t=this.parser.json,i=null===(e=t.extensions)||void 0===e?void 0:e.VRM,n=null==i?void 0:i.materialProperties;n&&(this._populateRenderQueueMap(n),n.forEach((e,i)=>{var n,r;let o=null===(n=t.materials)||void 0===n?void 0:n[i];if(null==o){console.warn(`VRMMaterialsV0CompatPlugin: Attempt to use materials[${i}] of glTF but the material doesn't exist`);return}if("VRM/MToon"===e.shader){let n=this._parseV0MToonProperties(e,o);t.materials[i]=n}else if(null===(r=e.shader)||void 0===r?void 0:r.startsWith("VRM/Unlit")){let n=this._parseV0UnlitProperties(e,o);t.materials[i]=n}else"VRM_USE_GLTFSHADER"===e.shader||console.warn(`VRMMaterialsV0CompatPlugin: Unknown shader: ${e.shader}`)}))},new(n||(n=Promise))(function(e,o){function s(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(t){var i;t.done?e(t.value):((i=t.value)instanceof n?i:new n(function(e){e(i)})).then(s,a)}l((r=r.apply(t,i||[])).next())})}_parseV0MToonProperties(e,t){var i,r,o,s,a,l,u,d,h,c,p,m,f,v,g,_,M,x,y,T,w,R,E,P,S,A,L,b,I,U,O,V,N,C,D,F,B,H,W,k,z,X,j,G;let Q=null!==(r=null===(i=e.keywordMap)||void 0===i?void 0:i._ALPHABLEND_ON)&&void 0!==r&&r,Y=(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite)===1,q=this._v0ParseRenderQueue(e),$=null!==(a=null===(s=e.keywordMap)||void 0===s?void 0:s._ALPHATEST_ON)&&void 0!==a&&a,Z=$?null===(l=e.floatProperties)||void 0===l?void 0:l._Cutoff:void 0,J=null!==(d=null===(u=e.floatProperties)||void 0===u?void 0:u._CullMode)&&void 0!==d?d:2,K=this._portTextureTransform(e),ee=null===(c=null===(h=e.vectorProperties)||void 0===h?void 0:h._Color)||void 0===c?void 0:c.map((e,t)=>3===t?e:eH(e)),et=null===(p=e.textureProperties)||void 0===p?void 0:p._MainTex,ei=null!=et?{index:et,extensions:Object.assign({},K)}:void 0,en=null===(m=e.floatProperties)||void 0===m?void 0:m._BumpScale,er=null===(f=e.textureProperties)||void 0===f?void 0:f._BumpMap,eo=null!=er?{index:er,scale:en,extensions:Object.assign({},K)}:void 0,es=null===(g=null===(v=e.vectorProperties)||void 0===v?void 0:v._EmissionColor)||void 0===g?void 0:g.map(eH),ea=null===(_=e.textureProperties)||void 0===_?void 0:_._EmissionMap,el=null!=ea?{index:ea,extensions:Object.assign({},K)}:void 0,eu=null===(x=null===(M=e.vectorProperties)||void 0===M?void 0:M._ShadeColor)||void 0===x?void 0:x.map(eH),ed=null===(y=e.textureProperties)||void 0===y?void 0:y._ShadeTexture,eh=null!=ed?{index:ed,extensions:Object.assign({},K)}:void 0,ec=null!==(w=null===(T=e.floatProperties)||void 0===T?void 0:T._ShadeShift)&&void 0!==w?w:0,ep=null!==(E=null===(R=e.floatProperties)||void 0===R?void 0:R._ShadeToony)&&void 0!==E?E:.9;ep=n.MathUtils.lerp(ep,1,.5+.5*ec),ec=-ec-(1-ep);let em=null===(P=e.floatProperties)||void 0===P?void 0:P._IndirectLightIntensity,ef=null===(S=e.textureProperties)||void 0===S?void 0:S._SphereAdd,ev=null===(A=e.floatProperties)||void 0===A?void 0:A._RimLightingMix,eg=null===(L=e.textureProperties)||void 0===L?void 0:L._RimTexture,e_=null!=eg?{index:eg,extensions:Object.assign({},K)}:void 0,eM=null===(I=null===(b=e.vectorProperties)||void 0===b?void 0:b._RimColor)||void 0===I?void 0:I.map(eH),ex=null===(U=e.floatProperties)||void 0===U?void 0:U._RimFresnelPower,ey=null===(O=e.floatProperties)||void 0===O?void 0:O._RimLift,eT=["none","worldCoordinates","screenCoordinates"][null!==(N=null===(V=e.floatProperties)||void 0===V?void 0:V._OutlineWidthMode)&&void 0!==N?N:0],ew=null!==(D=null===(C=e.floatProperties)||void 0===C?void 0:C._OutlineWidth)&&void 0!==D?D:0;ew*=.01;let eR=null===(F=e.textureProperties)||void 0===F?void 0:F._OutlineWidthTexture,eE=null!=eR?{index:eR,extensions:Object.assign({},K)}:void 0,eP=null===(H=null===(B=e.vectorProperties)||void 0===B?void 0:B._OutlineColor)||void 0===H?void 0:H.map(eH),eS=null===(W=e.floatProperties)||void 0===W?void 0:W._OutlineColorMode,eA=1===eS?null===(k=e.floatProperties)||void 0===k?void 0:k._OutlineLightingMix:0,eL=null===(z=e.textureProperties)||void 0===z?void 0:z._UvAnimMaskTexture,eb=null!=eL?{index:eL,extensions:Object.assign({},K)}:void 0,eI=null===(X=e.floatProperties)||void 0===X?void 0:X._UvAnimScrollX,eU=null===(j=e.floatProperties)||void 0===j?void 0:j._UvAnimScrollY;null!=eU&&(eU=-eU);let eO=null===(G=e.floatProperties)||void 0===G?void 0:G._UvAnimRotation,eV={specVersion:"1.0",transparentWithZWrite:Y&&Q,renderQueueOffsetNumber:q,shadeColorFactor:eu,shadeMultiplyTexture:eh,shadingShiftFactor:ec,shadingToonyFactor:ep,giEqualizationFactor:em?1-em:void 0,matcapFactor:null!=ef?[1,1,1]:void 0,matcapTexture:null!=ef?{index:ef}:void 0,rimLightingMixFactor:ev,rimMultiplyTexture:e_,parametricRimColorFactor:eM,parametricRimFresnelPowerFactor:ex,parametricRimLiftFactor:ey,outlineWidthMode:eT,outlineWidthFactor:ew,outlineWidthMultiplyTexture:eE,outlineColorFactor:eP,outlineLightingMixFactor:eA,uvAnimationMaskTexture:eb,uvAnimationScrollXSpeedFactor:eI,uvAnimationScrollYSpeedFactor:eU,uvAnimationRotationSpeedFactor:eO};return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:ee,baseColorTexture:ei},normalTexture:eo,emissiveTexture:el,emissiveFactor:es,alphaMode:Q?"BLEND":$?"MASK":"OPAQUE",alphaCutoff:Z,doubleSided:0===J,extensions:{VRMC_materials_mtoon:eV}})}_parseV0UnlitProperties(e,t){var i,n,r,o;let s="VRM/UnlitTransparentZWrite"===e.shader,a="VRM/UnlitTransparent"===e.shader||s,l=this._v0ParseRenderQueue(e),u="VRM/UnlitCutout"===e.shader,d=u?null===(i=e.floatProperties)||void 0===i?void 0:i._Cutoff:void 0,h=this._portTextureTransform(e),c=null===(r=null===(n=e.vectorProperties)||void 0===n?void 0:n._Color)||void 0===r?void 0:r.map(eH),p=null===(o=e.textureProperties)||void 0===o?void 0:o._MainTex,m=null!=p?{index:p,extensions:Object.assign({},h)}:void 0;return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:c,baseColorTexture:m},alphaMode:a?"BLEND":u?"MASK":"OPAQUE",alphaCutoff:d,extensions:{VRMC_materials_mtoon:{specVersion:"1.0",transparentWithZWrite:s,renderQueueOffsetNumber:l,shadeColorFactor:c,shadeMultiplyTexture:m}}})}_portTextureTransform(e){var t,i,n,r,o;let s=null===(t=e.vectorProperties)||void 0===t?void 0:t._MainTex;if(null==s)return{};let a=[null!==(i=null==s?void 0:s[0])&&void 0!==i?i:0,null!==(n=null==s?void 0:s[1])&&void 0!==n?n:0],l=[null!==(r=null==s?void 0:s[2])&&void 0!==r?r:1,null!==(o=null==s?void 0:s[3])&&void 0!==o?o:1];return a[1]=l[1]*(1-a[1])%1,{KHR_texture_transform:{offset:a,scale:l}}}_v0ParseRenderQueue(e){var t,i,n;let r=null!==(i=null===(t=e.keywordMap)||void 0===t?void 0:t._ALPHABLEND_ON)&&void 0!==i&&i,o=(null===(n=e.floatProperties)||void 0===n?void 0:n._ZWrite)===1,s=0;if(r){let t=e.renderQueue;null!=t&&(s=o?this._renderQueueMapTransparentZWrite.get(t):this._renderQueueMapTransparent.get(t))}return s}_populateRenderQueueMap(e){let t=new Set,i=new Set;e.forEach(e=>{var n,r,o;let s=null!==(r=null===(n=e.keywordMap)||void 0===n?void 0:n._ALPHABLEND_ON)&&void 0!==r&&r,a=(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite)===1;if(s){let n=e.renderQueue;null!=n&&(a?i.add(n):t.add(n))}}),t.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${t.size} render queues for Transparent materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),i.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${i.size} render queues for TransparentZWrite materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),Array.from(t).sort().forEach((e,i)=>{let n=Math.min(Math.max(i-t.size+1,-9),0);this._renderQueueMapTransparent.set(e,n)}),Array.from(i).sort().forEach((e,t)=>{this._renderQueueMapTransparentZWrite.set(e,Math.min(Math.max(t,0),9))})}}/*!
 * @pixiv/three-vrm-node-constraint v1.0.7
 * Node constraint module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-node-constraint is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */let ek=new n.Vector3;class ez extends n.Group{constructor(e){super(),this._attrPosition=new n.BufferAttribute(new Float32Array([0,0,0,0,0,0]),3),this._attrPosition.setUsage(n.DynamicDrawUsage);let t=new n.BufferGeometry;t.setAttribute("position",this._attrPosition);let i=new n.LineBasicMaterial({color:16711935,depthTest:!1,depthWrite:!1});this._line=new n.Line(t,i),this.add(this._line),this.constraint=e}updateMatrixWorld(e){ek.setFromMatrixPosition(this.constraint.destination.matrixWorld),this._attrPosition.setXYZ(0,ek.x,ek.y,ek.z),this.constraint.source&&ek.setFromMatrixPosition(this.constraint.source.matrixWorld),this._attrPosition.setXYZ(1,ek.x,ek.y,ek.z),this._attrPosition.needsUpdate=!0,super.updateMatrixWorld(e)}}function eX(e,t){return t.set(e.elements[12],e.elements[13],e.elements[14])}let ej=new n.Vector3,eG=new n.Vector3;function eQ(e){return e.invert?e.invert():e.inverse(),e}class eY{constructor(e,t){this.destination=e,this.source=t,this.weight=1}}let eq=new n.Vector3,e$=new n.Vector3,eZ=new n.Vector3,eJ=new n.Quaternion,eK=new n.Quaternion,e0=new n.Quaternion;class e1 extends eY{constructor(e,t){super(e,t),this._aimAxis="PositiveX",this._v3AimAxis=new n.Vector3(1,0,0),this._dstRestQuat=new n.Quaternion}get aimAxis(){return this._aimAxis}set aimAxis(e){this._aimAxis=e,this._v3AimAxis.set("PositiveX"===e?1:"NegativeX"===e?-1:0,"PositiveY"===e?1:"NegativeY"===e?-1:0,"PositiveZ"===e?1:"NegativeZ"===e?-1:0)}get dependencies(){let e=new Set([this.source]);return this.destination.parent&&e.add(this.destination.parent),e}setInitState(){this._dstRestQuat.copy(this.destination.quaternion)}update(){this.destination.updateWorldMatrix(!0,!1),this.source.updateWorldMatrix(!0,!1);let e=eJ.identity(),t=eK.identity();this.destination.parent&&(this.destination.parent.matrixWorld.decompose(ej,e,eG),eQ(t.copy(e)));let i=eq.copy(this._v3AimAxis).applyQuaternion(this._dstRestQuat).applyQuaternion(e),n=eX(this.source.matrixWorld,e$).sub(eX(this.destination.matrixWorld,eZ)).normalize(),r=e0.setFromUnitVectors(i,n).premultiply(t).multiply(e).multiply(this._dstRestQuat);this.destination.quaternion.copy(this._dstRestQuat).slerp(r,this.weight)}}function e3(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(s,a)}l((n=n.apply(e,t||[])).next())})}class e2{constructor(){this._constraints=new Set,this._objectConstraintsMap=new Map}get constraints(){return this._constraints}addConstraint(e){this._constraints.add(e);let t=this._objectConstraintsMap.get(e.destination);null==t&&(t=new Set,this._objectConstraintsMap.set(e.destination,t)),t.add(e)}deleteConstraint(e){this._constraints.delete(e);let t=this._objectConstraintsMap.get(e.destination);t.delete(e)}setInitState(){let e=new Set,t=new Set;for(let i of this._constraints)this._processConstraint(i,e,t,e=>e.setInitState())}update(){let e=new Set,t=new Set;for(let i of this._constraints)this._processConstraint(i,e,t,e=>e.update())}_processConstraint(e,t,i,n){if(i.has(e))return;if(t.has(e))throw Error("VRMNodeConstraintManager: Circular dependency detected while updating constraints");t.add(e);let r=e.dependencies;for(let e of r)!function(e,t){let i=[e],n=e.parent;for(;null!==n;)i.unshift(n),n=n.parent;i.forEach(e=>{t(e)})}(e,e=>{let r=this._objectConstraintsMap.get(e);if(r)for(let e of r)this._processConstraint(e,t,i,n)});n(e),i.add(e)}}let e4=new n.Quaternion,e6=new n.Quaternion;class e9 extends eY{constructor(e,t){super(e,t),this._dstRestQuat=new n.Quaternion,this._invSrcRestQuat=new n.Quaternion}get dependencies(){return new Set([this.source])}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),eQ(this._invSrcRestQuat.copy(this.source.quaternion))}update(){let e=e4.copy(this._invSrcRestQuat).multiply(this.source.quaternion),t=e6.copy(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(t,this.weight)}}let e7=new n.Vector3,e5=new n.Quaternion,e8=new n.Quaternion;class te extends eY{constructor(e,t){super(e,t),this._rollAxis="X",this._v3RollAxis=new n.Vector3(1,0,0),this._dstRestQuat=new n.Quaternion,this._invDstRestQuat=new n.Quaternion,this._invSrcRestQuatMulDstRestQuat=new n.Quaternion}get rollAxis(){return this._rollAxis}set rollAxis(e){this._rollAxis=e,this._v3RollAxis.set("X"===e?1:0,"Y"===e?1:0,"Z"===e?1:0)}get dependencies(){return new Set([this.source])}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),eQ(this._invDstRestQuat.copy(this._dstRestQuat)),eQ(this._invSrcRestQuatMulDstRestQuat.copy(this.source.quaternion)).multiply(this._dstRestQuat)}update(){let e=e5.copy(this._invDstRestQuat).multiply(this.source.quaternion).multiply(this._invSrcRestQuatMulDstRestQuat),t=e7.copy(this._v3RollAxis).applyQuaternion(e),i=e8.setFromUnitVectors(t,this._v3RollAxis),n=i.premultiply(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(n,this.weight)}}let tt=new Set(["1.0","1.0-beta"]);class ti{constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}get name(){return ti.EXTENSION_NAME}afterRoot(e){return e3(this,void 0,void 0,function*(){e.userData.vrmNodeConstraintManager=yield this._import(e)})}_import(e){var t;return e3(this,void 0,void 0,function*(){let i=this.parser.json,n=(null===(t=i.extensionsUsed)||void 0===t?void 0:t.indexOf(ti.EXTENSION_NAME))!==-1;if(!n)return null;let r=new e2,o=yield this.parser.getDependencies("node");return o.forEach((e,t)=>{var n;let s=i.nodes[t],a=null===(n=null==s?void 0:s.extensions)||void 0===n?void 0:n[ti.EXTENSION_NAME];if(null==a)return;let l=a.specVersion;if(!tt.has(l)){console.warn(`VRMNodeConstraintLoaderPlugin: Unknown ${ti.EXTENSION_NAME} specVersion "${l}"`);return}let u=a.constraint;if(null!=u.roll){let t=this._importRollConstraint(e,o,u.roll);r.addConstraint(t)}else if(null!=u.aim){let t=this._importAimConstraint(e,o,u.aim);r.addConstraint(t)}else if(null!=u.rotation){let t=this._importRotationConstraint(e,o,u.rotation);r.addConstraint(t)}}),e.scene.updateMatrixWorld(),r.setInitState(),r})}_importRollConstraint(e,t,i){let{source:n,rollAxis:r,weight:o}=i,s=t[n],a=new te(e,s);if(null!=r&&(a.rollAxis=r),null!=o&&(a.weight=o),this.helperRoot){let e=new ez(a);this.helperRoot.add(e)}return a}_importAimConstraint(e,t,i){let{source:n,aimAxis:r,weight:o}=i,s=t[n],a=new e1(e,s);if(null!=r&&(a.aimAxis=r),null!=o&&(a.weight=o),this.helperRoot){let e=new ez(a);this.helperRoot.add(e)}return a}_importRotationConstraint(e,t,i){let{source:n,weight:r}=i,o=t[n],s=new e9(e,o);if(null!=r&&(s.weight=r),this.helperRoot){let e=new ez(s);this.helperRoot.add(e)}return s}}ti.EXTENSION_NAME="VRMC_node_constraint";/*!
 * @pixiv/three-vrm-springbone v1.0.7
 * Spring bone module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2023 pixiv Inc.
 * @pixiv/three-vrm-springbone is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */class tn{}let tr=new n.Vector3,to=new n.Vector3;class ts extends tn{constructor(e){var t,i,r;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new n.Vector3(0,0,0),this.tail=null!==(i=null==e?void 0:e.tail)&&void 0!==i?i:new n.Vector3(0,0,0),this.radius=null!==(r=null==e?void 0:e.radius)&&void 0!==r?r:0}get type(){return"capsule"}calculateCollision(e,t,i,n){tr.copy(this.offset).applyMatrix4(e),to.copy(this.tail).applyMatrix4(e),to.sub(tr);let r=to.lengthSq();n.copy(t).sub(tr);let o=to.dot(n);o<=0||(r<=o||to.multiplyScalar(o/r),n.sub(to));let s=i+this.radius,a=n.length()-s;return n.normalize(),a}}class ta extends tn{constructor(e){var t,i;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new n.Vector3(0,0,0),this.radius=null!==(i=null==e?void 0:e.radius)&&void 0!==i?i:0}get type(){return"sphere"}calculateCollision(e,t,i,n){n.copy(this.offset).applyMatrix4(e),n.negate().add(t);let r=i+this.radius,o=n.length()-r;return n.normalize(),o}}let tl=new n.Vector3;class tu extends n.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentOffset=new n.Vector3,this._currentTail=new n.Vector3,this._shape=e,this._attrPos=new n.BufferAttribute(new Float32Array(396),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.BufferAttribute(new Uint16Array(264),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._shape.radius&&(this._currentRadius=this._shape.radius,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0),this._currentTail.equals(this._shape.tail)||(this._currentTail.copy(this._shape.tail),e=!0),e&&this._buildPosition()}_buildPosition(){tl.copy(this._currentTail).sub(this._currentOffset);let e=tl.length()/this._currentRadius;for(let t=0;t<=16;t++){let i=t/16*Math.PI;this._attrPos.setXYZ(t,-Math.sin(i),-Math.cos(i),0),this._attrPos.setXYZ(17+t,e+Math.sin(i),Math.cos(i),0),this._attrPos.setXYZ(34+t,-Math.sin(i),0,-Math.cos(i)),this._attrPos.setXYZ(51+t,e+Math.sin(i),0,Math.cos(i))}for(let t=0;t<32;t++){let i=t/16*Math.PI;this._attrPos.setXYZ(68+t,0,Math.sin(i),Math.cos(i)),this._attrPos.setXYZ(100+t,e,Math.sin(i),Math.cos(i))}let t=Math.atan2(tl.y,Math.sqrt(tl.x*tl.x+tl.z*tl.z)),i=-Math.atan2(tl.z,tl.x);this.rotateZ(t),this.rotateY(i),this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<34;e++){let t=(e+1)%34;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(68+2*e,34+e,34+t)}for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(136+2*e,68+e,68+t),this._attrIndex.setXY(200+2*e,100+e,100+t)}this._attrIndex.needsUpdate=!0}}class td extends n.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentOffset=new n.Vector3,this._shape=e,this._attrPos=new n.BufferAttribute(new Float32Array(288),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.BufferAttribute(new Uint16Array(192),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._shape.radius&&(this._currentRadius=this._shape.radius,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.needsUpdate=!0}}class th extends n.Group{constructor(e){if(super(),this.matrixAutoUpdate=!1,this.collider=e,this.collider.shape instanceof ta)this._geometry=new td(this.collider.shape);else if(this.collider.shape instanceof ts)this._geometry=new tu(this.collider.shape);else throw Error("VRMSpringBoneColliderHelper: Unknown collider shape type detected");let t=new n.LineBasicMaterial({color:16711935,depthTest:!1,depthWrite:!1});this._line=new n.LineSegments(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.collider.updateWorldMatrix(!0,!1),this.matrix.copy(this.collider.matrixWorld),this._geometry.update(),super.updateMatrixWorld(e)}}class tc extends n.BufferGeometry{constructor(e){super(),this._currentRadius=0,this._currentTail=new n.Vector3,this._springBone=e,this._attrPos=new n.BufferAttribute(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.BufferAttribute(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this._springBone.settings.hitRadius&&(this._currentRadius=this._springBone.settings.hitRadius,e=!0),this._currentTail.equals(this._springBone.initialLocalChildPosition)||(this._currentTail.copy(this._springBone.initialLocalChildPosition),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}}class tp extends n.Group{constructor(e){super(),this.matrixAutoUpdate=!1,this.springBone=e,this._geometry=new tc(this.springBone);let t=new n.LineBasicMaterial({color:16776960,depthTest:!1,depthWrite:!1});this._line=new n.LineSegments(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.springBone.bone.updateWorldMatrix(!0,!1),this.matrix.copy(this.springBone.bone.matrixWorld),this._geometry.update(),super.updateMatrixWorld(e)}}class tm extends n.Object3D{constructor(e){super(),this.shape=e}}let tf=new n.Matrix4;function tv(e){return e.invert?e.invert():e.getInverse(tf.copy(e)),e}class tg{constructor(e){this._inverseCache=new n.Matrix4,this._shouldUpdateInverse=!0,this.matrix=e,this._originalElements=e.elements,e.elements=new Proxy(e.elements,{set:(e,t,i)=>(this._shouldUpdateInverse=!0,e[t]=i,!0)})}get inverse(){return this._shouldUpdateInverse&&(this._inverseCache.copy(this.matrix),tv(this._inverseCache),this._shouldUpdateInverse=!1),this._inverseCache}revert(){this.matrix.elements=this._originalElements}}let t_=new n.Matrix4,tM=new n.Vector3,tx=new n.Vector3,ty=new n.Vector3,tT=new n.Vector3,tw=new n.Vector3,tR=new n.Vector3,tE=new n.Quaternion,tP=new n.Matrix4,tS=new n.Matrix4;class tA{constructor(e,t,i={},r=[]){var o,s,a,l,u,d;this._currentTail=new n.Vector3,this._prevTail=new n.Vector3,this._boneAxis=new n.Vector3,this._worldSpaceBoneLength=0,this._center=null,this._initialLocalMatrix=new n.Matrix4,this._initialLocalRotation=new n.Quaternion,this._initialLocalChildPosition=new n.Vector3,this.bone=e,this.bone.matrixAutoUpdate=!1,this.child=t,this.settings={hitRadius:null!==(o=i.hitRadius)&&void 0!==o?o:0,stiffness:null!==(s=i.stiffness)&&void 0!==s?s:1,gravityPower:null!==(a=i.gravityPower)&&void 0!==a?a:0,gravityDir:null!==(u=null===(l=i.gravityDir)||void 0===l?void 0:l.clone())&&void 0!==u?u:new n.Vector3(0,-1,0),dragForce:null!==(d=i.dragForce)&&void 0!==d?d:.4},this.colliderGroups=r}get center(){return this._center}set center(e){var t;(null===(t=this._center)||void 0===t?void 0:t.userData.inverseCacheProxy)&&(this._center.userData.inverseCacheProxy.revert(),delete this._center.userData.inverseCacheProxy),this._center=e,this._center&&!this._center.userData.inverseCacheProxy&&(this._center.userData.inverseCacheProxy=new tg(this._center.matrixWorld))}get initialLocalChildPosition(){return this._initialLocalChildPosition}get _parentMatrixWorld(){return this.bone.parent?this.bone.parent.matrixWorld:t_}setInitState(){this._initialLocalMatrix.copy(this.bone.matrix),this._initialLocalRotation.copy(this.bone.quaternion),this.child?this._initialLocalChildPosition.copy(this.child.position):this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(.07);let e=this._getMatrixWorldToCenter(tP);this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(e),this._prevTail.copy(this._currentTail),this._boneAxis.copy(this._initialLocalChildPosition).normalize()}reset(){this.bone.quaternion.copy(this._initialLocalRotation),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix);let e=this._getMatrixWorldToCenter(tP);this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(e),this._prevTail.copy(this._currentTail)}update(e){if(e<=0)return;this._calcWorldSpaceBoneLength(),tT.setFromMatrixPosition(this.bone.matrixWorld);let t=this._getMatrixWorldToCenter(tP);tw.copy(tT).applyMatrix4(t);let i=tE.setFromRotationMatrix(t),n=tS.copy(t).multiply(this._parentMatrixWorld),r=tx.copy(this._boneAxis).applyMatrix4(this._initialLocalMatrix).applyMatrix4(n).sub(tw).normalize(),o=ty.copy(this.settings.gravityDir).applyQuaternion(i).normalize(),s=this._getMatrixCenterToWorld(tP);tR.copy(this._currentTail).add(tM.copy(this._currentTail).sub(this._prevTail).multiplyScalar(1-this.settings.dragForce)).add(tM.copy(r).multiplyScalar(this.settings.stiffness*e)).add(tM.copy(o).multiplyScalar(this.settings.gravityPower*e)).applyMatrix4(s),tR.sub(tT).normalize().multiplyScalar(this._worldSpaceBoneLength).add(tT),this._collision(tR),t=this._getMatrixWorldToCenter(tP),this._prevTail.copy(this._currentTail),this._currentTail.copy(tM.copy(tR).applyMatrix4(t));let a=tv(tP.copy(this._parentMatrixWorld).multiply(this._initialLocalMatrix)),l=tE.setFromUnitVectors(this._boneAxis,tM.copy(tR).applyMatrix4(a).normalize());this.bone.quaternion.copy(this._initialLocalRotation).multiply(l),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix)}_collision(e){this.colliderGroups.forEach(t=>{t.colliders.forEach(t=>{let i=t.shape.calculateCollision(t.matrixWorld,e,this.settings.hitRadius,tM);i<0&&(e.add(tM.multiplyScalar(-i)),e.sub(tT).normalize().multiplyScalar(this._worldSpaceBoneLength).add(tT))})})}_calcWorldSpaceBoneLength(){tM.setFromMatrixPosition(this.bone.matrixWorld),this.child?tx.setFromMatrixPosition(this.child.matrixWorld):(tx.copy(this._initialLocalChildPosition),tx.applyMatrix4(this.bone.matrixWorld)),this._worldSpaceBoneLength=tM.sub(tx).length()}_getMatrixCenterToWorld(e){return this._center?e.copy(this._center.matrixWorld):e.identity(),e}_getMatrixWorldToCenter(e){return this._center?e.copy(this._center.userData.inverseCacheProxy.inverse):e.identity(),e}}function tL(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(s,a)}l((n=n.apply(e,t||[])).next())})}class tb{constructor(){this._joints=new Set,this._objectSpringBonesMap=new Map}get joints(){return this._joints}get springBones(){return console.warn("VRMSpringBoneManager: springBones is deprecated. use joints instead."),this._joints}get colliderGroups(){let e=new Set;return this._joints.forEach(t=>{t.colliderGroups.forEach(t=>{e.add(t)})}),Array.from(e)}get colliders(){let e=new Set;return this.colliderGroups.forEach(t=>{t.colliders.forEach(t=>{e.add(t)})}),Array.from(e)}addJoint(e){this._joints.add(e);let t=this._objectSpringBonesMap.get(e.bone);null==t&&(t=new Set,this._objectSpringBonesMap.set(e.bone,t)),t.add(e)}addSpringBone(e){console.warn("VRMSpringBoneManager: addSpringBone() is deprecated. use addJoint() instead."),this.addJoint(e)}deleteJoint(e){this._joints.delete(e);let t=this._objectSpringBonesMap.get(e.bone);t.delete(e)}deleteSpringBone(e){console.warn("VRMSpringBoneManager: deleteSpringBone() is deprecated. use deleteJoint() instead."),this.deleteJoint(e)}setInitState(){let e=new Set,t=new Set,i=new Set;for(let n of this._joints)this._processSpringBone(n,e,t,i,e=>e.setInitState())}reset(){let e=new Set,t=new Set,i=new Set;for(let n of this._joints)this._processSpringBone(n,e,t,i,e=>e.reset())}update(e){let t=new Set,i=new Set,n=new Set;for(let r of this._joints)this._processSpringBone(r,t,i,n,t=>t.update(e)),function e(t,i){t.children.forEach(t=>{let n=i(t);n||e(t,i)})}(r.bone,e=>{var t,i;return(null!==(i=null===(t=this._objectSpringBonesMap.get(e))||void 0===t?void 0:t.size)&&void 0!==i?i:0)>0||(e.updateWorldMatrix(!1,!1),!1)})}_processSpringBone(e,t,i,n,r){if(i.has(e))return;if(t.has(e))throw Error("VRMSpringBoneManager: Circular dependency detected while updating springbones");t.add(e);let o=this._getDependencies(e);for(let e of o)!function(e,t){let i=[],n=e;for(;null!==n;)i.unshift(n),n=n.parent;i.forEach(e=>{t(e)})}(e,e=>{let o=this._objectSpringBonesMap.get(e);if(o)for(let e of o)this._processSpringBone(e,t,i,n,r);else n.has(e)||(e.updateWorldMatrix(!1,!1),n.add(e))});e.bone.updateMatrix(),e.bone.updateWorldMatrix(!1,!1),r(e),n.add(e.bone),i.add(e)}_getDependencies(e){let t=new Set,i=e.bone.parent;return i&&t.add(i),e.colliderGroups.forEach(e=>{e.colliders.forEach(e=>{t.add(e)})}),t}}let tI=new Set(["1.0","1.0-beta"]);class tU{constructor(e,t){this.parser=e,this.jointHelperRoot=null==t?void 0:t.jointHelperRoot,this.colliderHelperRoot=null==t?void 0:t.colliderHelperRoot}get name(){return tU.EXTENSION_NAME}afterRoot(e){return tL(this,void 0,void 0,function*(){e.userData.vrmSpringBoneManager=yield this._import(e)})}_import(e){return tL(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(null!=t)return t;let i=yield this._v0Import(e);return null!=i?i:null})}_v1Import(e){var t,i,r,o,s;return tL(this,void 0,void 0,function*(){let a=e.parser.json,l=(null===(t=a.extensionsUsed)||void 0===t?void 0:t.indexOf(tU.EXTENSION_NAME))!==-1;if(!l)return null;let u=new tb,d=yield e.parser.getDependencies("node"),h=null===(i=a.extensions)||void 0===i?void 0:i[tU.EXTENSION_NAME];if(!h)return null;let c=h.specVersion;if(!tI.has(c))return console.warn(`VRMSpringBoneLoaderPlugin: Unknown ${tU.EXTENSION_NAME} specVersion "${c}"`),null;let p=null===(r=h.colliders)||void 0===r?void 0:r.map((e,t)=>{var i,r,o,s,a;let l=d[e.node],u=e.shape;if(u.sphere)return this._importSphereCollider(l,{offset:new n.Vector3().fromArray(null!==(i=u.sphere.offset)&&void 0!==i?i:[0,0,0]),radius:null!==(r=u.sphere.radius)&&void 0!==r?r:0});if(u.capsule)return this._importCapsuleCollider(l,{offset:new n.Vector3().fromArray(null!==(o=u.capsule.offset)&&void 0!==o?o:[0,0,0]),radius:null!==(s=u.capsule.radius)&&void 0!==s?s:0,tail:new n.Vector3().fromArray(null!==(a=u.capsule.tail)&&void 0!==a?a:[0,0,0])});throw Error(`VRMSpringBoneLoaderPlugin: The collider #${t} has no valid shape`)}),m=null===(o=h.colliderGroups)||void 0===o?void 0:o.map((e,t)=>{var i;let n=(null!==(i=e.colliders)&&void 0!==i?i:[]).map(e=>{let i=null==p?void 0:p[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The colliderGroup #${t} attempted to use a collider #${e} but not found`);return i});return{colliders:n,name:e.name}});return null===(s=h.springs)||void 0===s||s.forEach((e,t)=>{var i;let r;let o=e.joints,s=null===(i=e.colliderGroups)||void 0===i?void 0:i.map(e=>{let i=null==m?void 0:m[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return i}),a=null!=e.center?d[e.center]:void 0;o.forEach(e=>{if(r){let t=r.node,i=d[t],o=e.node,l=d[o],h={hitRadius:r.hitRadius,dragForce:r.dragForce,gravityPower:r.gravityPower,stiffness:r.stiffness,gravityDir:null!=r.gravityDir?new n.Vector3().fromArray(r.gravityDir):void 0},c=this._importJoint(i,l,h,s);a&&(c.center=a),u.addJoint(c)}r=e})}),u.setInitState(),u})}_v0Import(e){var t,i,r;return tL(this,void 0,void 0,function*(){let o=e.parser.json,s=(null===(t=o.extensionsUsed)||void 0===t?void 0:t.indexOf("VRM"))!==-1;if(!s)return null;let a=null===(i=o.extensions)||void 0===i?void 0:i.VRM,l=null==a?void 0:a.secondaryAnimation;if(!l)return null;let u=null==l?void 0:l.boneGroups;if(!u)return null;let d=new tb,h=yield e.parser.getDependencies("node"),c=null===(r=l.colliderGroups)||void 0===r?void 0:r.map(e=>{var t;let i=h[e.node],r=(null!==(t=e.colliders)&&void 0!==t?t:[]).map((e,t)=>{var r,o,s;let a=new n.Vector3(0,0,0);return e.offset&&a.set(null!==(r=e.offset.x)&&void 0!==r?r:0,null!==(o=e.offset.y)&&void 0!==o?o:0,e.offset.z?-e.offset.z:0),this._importSphereCollider(i,{offset:a,radius:null!==(s=e.radius)&&void 0!==s?s:0})});return{colliders:r}});return null==u||u.forEach((e,t)=>{let i=e.bones;i&&i.forEach(i=>{var r,o,s,a;let l=h[i],u=new n.Vector3;e.gravityDir?u.set(null!==(r=e.gravityDir.x)&&void 0!==r?r:0,null!==(o=e.gravityDir.y)&&void 0!==o?o:0,null!==(s=e.gravityDir.z)&&void 0!==s?s:0):u.set(0,-1,0);let p=null!=e.center?h[e.center]:void 0,m={hitRadius:e.hitRadius,dragForce:e.dragForce,gravityPower:e.gravityPower,stiffness:e.stiffiness,gravityDir:u},f=null===(a=e.colliderGroups)||void 0===a?void 0:a.map(e=>{let i=null==c?void 0:c[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return i});l.traverse(e=>{var t;let i=null!==(t=e.children[0])&&void 0!==t?t:null,n=this._importJoint(e,i,m,f);p&&(n.center=p),d.addJoint(n)})})}),e.scene.updateMatrixWorld(),d.setInitState(),d})}_importJoint(e,t,i,n){let r=new tA(e,t,i,n);if(this.jointHelperRoot){let e=new tp(r);this.jointHelperRoot.add(e),e.renderOrder=this.jointHelperRoot.renderOrder}return r}_importSphereCollider(e,t){let{offset:i,radius:n}=t,r=new ta({offset:i,radius:n}),o=new tm(r);if(e.add(o),this.colliderHelperRoot){let e=new th(o);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return o}_importCapsuleCollider(e,t){let{offset:i,radius:n,tail:r}=t,o=new ts({offset:i,radius:n,tail:r}),s=new tm(o);if(e.add(s),this.colliderHelperRoot){let e=new th(s);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return s}}tU.EXTENSION_NAME="VRMC_springBone";class tO{constructor(e,t){var i,n,r,o,s,a,l,u,d,h;this.parser=e;let c=null==t?void 0:t.helperRoot,p=null==t?void 0:t.autoUpdateHumanBones;this.expressionPlugin=null!==(i=null==t?void 0:t.expressionPlugin)&&void 0!==i?i:new y(e),this.firstPersonPlugin=null!==(n=null==t?void 0:t.firstPersonPlugin)&&void 0!==n?n:new R(e),this.humanoidPlugin=null!==(r=null==t?void 0:t.humanoidPlugin)&&void 0!==r?r:new z(e,{helperRoot:c,autoUpdateHumanBones:p}),this.lookAtPlugin=null!==(o=null==t?void 0:t.lookAtPlugin)&&void 0!==o?o:new ew(e,{helperRoot:c}),this.metaPlugin=null!==(s=null==t?void 0:t.metaPlugin)&&void 0!==s?s:new eE(e),this.mtoonMaterialPlugin=null!==(a=null==t?void 0:t.mtoonMaterialPlugin)&&void 0!==a?a:new eF(e),this.materialsHDREmissiveMultiplierPlugin=null!==(l=null==t?void 0:t.materialsHDREmissiveMultiplierPlugin)&&void 0!==l?l:new eB(e),this.materialsV0CompatPlugin=null!==(u=null==t?void 0:t.materialsV0CompatPlugin)&&void 0!==u?u:new eW(e),this.springBonePlugin=null!==(d=null==t?void 0:t.springBonePlugin)&&void 0!==d?d:new tU(e,{colliderHelperRoot:c,jointHelperRoot:c}),this.nodeConstraintPlugin=null!==(h=null==t?void 0:t.nodeConstraintPlugin)&&void 0!==h?h:new ti(e,{helperRoot:c})}get name(){return"VRMLoaderPlugin"}beforeRoot(){return eA(this,void 0,void 0,function*(){yield this.materialsV0CompatPlugin.beforeRoot(),yield this.mtoonMaterialPlugin.beforeRoot()})}loadMesh(e){return eA(this,void 0,void 0,function*(){return yield this.mtoonMaterialPlugin.loadMesh(e)})}getMaterialType(e){let t=this.mtoonMaterialPlugin.getMaterialType(e);return null!=t?t:null}extendMaterialParams(e,t){return eA(this,void 0,void 0,function*(){yield this.materialsHDREmissiveMultiplierPlugin.extendMaterialParams(e,t),yield this.mtoonMaterialPlugin.extendMaterialParams(e,t)})}afterRoot(e){return eA(this,void 0,void 0,function*(){yield this.metaPlugin.afterRoot(e),yield this.humanoidPlugin.afterRoot(e),yield this.expressionPlugin.afterRoot(e),yield this.lookAtPlugin.afterRoot(e),yield this.firstPersonPlugin.afterRoot(e),yield this.springBonePlugin.afterRoot(e),yield this.nodeConstraintPlugin.afterRoot(e),yield this.mtoonMaterialPlugin.afterRoot(e);let t=e.userData.vrmMeta,i=e.userData.vrmHumanoid;if(t&&i){let n=new eS({scene:e.scene,expressionManager:e.userData.vrmExpressionManager,firstPerson:e.userData.vrmFirstPerson,humanoid:i,lookAt:e.userData.vrmLookAt,meta:t,materials:e.userData.vrmMToonMaterials,springBoneManager:e.userData.vrmSpringBoneManager,nodeConstraintManager:e.userData.vrmNodeConstraintManager});e.userData.vrm=n}})}}function tV(e){if(Object.values(e).forEach(e=>{(null==e?void 0:e.isTexture)&&e.dispose()}),e.isShaderMaterial){let t=e.uniforms;t&&Object.values(t).forEach(e=>{let t=e.value;(null==t?void 0:t.isTexture)&&t.dispose()})}e.dispose()}function tN(e){let t=e.geometry;t&&t.dispose();let i=e.skeleton;i&&i.dispose();let n=e.material;n&&(Array.isArray(n)?n.forEach(e=>tV(e)):n&&tV(n))}class tC{constructor(){}}tC.deepDispose=function(e){e.traverse(tN)},tC.removeUnnecessaryJoints=function(e){let t=new Map;e.traverse(e=>{if("SkinnedMesh"!==e.type)return;let i=e.geometry,r=i.getAttribute("skinIndex"),o=t.get(r);if(!o){let i=[],s=[],a={},l=r.array;for(let t=0;t<l.length;t++){let n=l[t];void 0===a[n]&&(a[n]=i.length,i.push(e.skeleton.bones[n]),s.push(e.skeleton.boneInverses[n])),l[t]=a[n]}r.copyArray(l),r.needsUpdate=!0,o=new n.Skeleton(i,s),t.set(r,o)}e.bind(o,new n.Matrix4)})},tC.removeUnnecessaryVertices=function(e){let t=new Map;e.traverse(e=>{var i,r,o,s;if(!e.isMesh)return;let a=e,l=a.geometry,u=l.index;if(null==u)return;let d=t.get(l);if(null!=d){a.geometry=d;return}let h=new n.BufferGeometry;h.name=l.name,h.morphTargetsRelative=l.morphTargetsRelative,l.groups.forEach(e=>{h.addGroup(e.start,e.count,e.materialIndex)}),h.boundingBox=null!==(r=null===(i=l.boundingBox)||void 0===i?void 0:i.clone())&&void 0!==r?r:null,h.boundingSphere=null!==(s=null===(o=l.boundingSphere)||void 0===o?void 0:o.clone())&&void 0!==s?s:null,h.setDrawRange(l.drawRange.start,l.drawRange.count),h.userData=l.userData,t.set(l,h);let c=[],p=[];{let e=u.array,t=new e.constructor(e.length),i=0;for(let n=0;n<e.length;n++){let r=e[n],o=c[r];null==o&&(c[r]=i,p[i]=r,o=i,i++),t[n]=o}h.setIndex(new n.BufferAttribute(t,1,!1))}Object.keys(l.attributes).forEach(e=>{let t=l.attributes[e];if(t.isInterleavedBufferAttribute)throw Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");let i=t.array,{itemSize:r,normalized:o}=t,s=new i.constructor(p.length*r);p.forEach((e,t)=>{for(let n=0;n<r;n++)s[t*r+n]=i[e*r+n]}),h.setAttribute(e,new n.BufferAttribute(s,r,o))});let m=!0;Object.keys(l.morphAttributes).forEach(e=>{h.morphAttributes[e]=[];let t=l.morphAttributes[e];for(let i=0;i<t.length;i++){let r=t[i];if(r.isInterleavedBufferAttribute)throw Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");let o=r.array,{itemSize:s,normalized:a}=r,l=new o.constructor(p.length*s);p.forEach((e,t)=>{for(let i=0;i<s;i++)l[t*s+i]=o[e*s+i]}),m=m&&l.every(e=>0===e),h.morphAttributes[e][i]=new n.BufferAttribute(l,s,a)}}),m&&(h.morphAttributes={}),a.geometry=h}),Array.from(t.keys()).forEach(e=>{e.dispose()})},tC.rotateVRM0=function(e){var t;(null===(t=e.meta)||void 0===t?void 0:t.metaVersion)==="0"&&(e.scene.rotation.y=Math.PI)}}}]);